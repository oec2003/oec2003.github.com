<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冯威的博客</title>
  
  <subtitle>公众号：不止dotNET | 临渊羡鱼不如退而结网</subtitle>
  <link href="http://fwhyy.com/atom.xml" rel="self"/>
  
  <link href="http://fwhyy.com/"/>
  <updated>2023-10-21T09:44:07.273Z</updated>
  <id>http://fwhyy.com/</id>
  
  <author>
    <name>oec2003</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何设计 API？</title>
    <link href="http://fwhyy.com/2023/10/how-to-design-the-api/"/>
    <id>http://fwhyy.com/2023/10/how-to-design-the-api/</id>
    <published>2023-10-17T01:42:48.000Z</published>
    <updated>2023-10-21T09:44:07.273Z</updated>
    
    <content type="html"><![CDATA[<p>在前后端分离的设计中，不管使用什么语言，后端都需要提供 WebAPI 给前端使用。如果是一个平台级的产品，还有可能需要将平台的公共 API 提供给第三方系统使用，这些都要考虑到 API 的设计。</p><span id="more"></span><p>本文聊下 API 设计可能遇到的问题以及处理方式。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1、客户端种类比较多，不容易实现差异化。</p><p>以我们现在正在做的低代码平台来说，存在的客户端有下面这些：</p><ul><li>Web 端应用程序</li><li>移动端的应用程序</li><li>第三方开发人员编写的应用程序</li><li>自定义组件（符合规范的 Vue 前端组件，可以无缝和平台进行整合）</li><li>平台配置的脚本（直接配置在平台中，可以调用接口、处理界面元素）</li></ul><p>不同的客户端在调用接口时，输入输出会存在差异，比如：移动端的数据列表功能和结构上比 PC 端要简单很多，如果调用统一的接口，会造成浪费。</p><p>2、客户端直接对 API 进行调用。</p><ul><li><p>API 如果拆分的比较细，一次操作会发出多个请求才能拿到想要的数据，效率比较低</p></li><li><p>当需要多个请求时，还需要在客户端进行逻辑的组合，这样每个客户端可能都有一套自己的逻辑，不容易维护</p></li><li><p>服务如果进行拆分和合并，客户端代码需要同步进行修改</p></li><li><p>如果 API 进行了修改，第三方调用方需要配合修改，但这中间的沟通成本会很高，有时甚至不可行</p></li></ul><p>要解决这些问题，就应该单独提供一个独立的公共 API，而不是直接让第三方开发人员或其他客户端直接访问平台公开的 API ，涉及到独立的公共 API，API 网关就要出场了。</p><h2 id="API-网关"><a href="#API-网关" class="headerlink" title="API  网关"></a>API  网关</h2><p>API 网关是一种服务，是外部进入到应用程序内部的入口点。负责请求路由、身份验证、限流、熔断、流量监控等各种功能。</p><h3 id="路由请求"><a href="#路由请求" class="headerlink" title="路由请求"></a>路由请求</h3><p>路由请求是 API 网关的核心功能，当网关收到请求时，会去查询路由映射关系，将请求指定到相应的服务。跟 Nginx 的反向代理有点类似。</p><p>路由的配置可以是静态的，也可以是动态的，比如在 Ocelot 中，可以在 json 文件中进行路由映射的配置，也可以使用代码的方式按照需求进行动态路由修改。</p><p>参考：<a href="https://github.com/oec2003/StudySamples/tree/master/UpdateOcelotConfig">https://github.com/oec2003/StudySamples/tree/master/UpdateOcelotConfig</a></p><h3 id="组合多个服务"><a href="#组合多个服务" class="headerlink" title="组合多个服务"></a>组合多个服务</h3><p>在使用我们平台搭建的业务系统中，打开数据列表的详情，会做下面几件事情：</p><ul><li>获取按钮配置</li><li>获取表单模型</li><li>获取表单字段权限（根据不同的人员，获取的是不同流程节点的权限）</li><li>获取表单数据</li></ul><p>在 API 网关中可以对客户端提供统一入口调用，将这些来自不同服务的接口进行整合，统一输出，因为网关和服务都在内网，传输速度比较快，和客户端需要同时获取多个 API 请求相比，提升了效率。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202310161742890.webp" alt="image-20231016161047257"></p><h3 id="专属-API"><a href="#专属-API" class="headerlink" title="专属 API"></a>专属 API</h3><p>作为一个平台，对外提供的公共 API 颗粒度往往不会很细，否则就不具备通用性了。如果针对不同的移动端（安卓、iOS）、或者特定的第三方平台，有一些细节上的区别。</p><p>网关可以为不同类型的客户端提供独立的 API。</p><h3 id="一些扩展能力"><a href="#一些扩展能力" class="headerlink" title="一些扩展能力"></a>一些扩展能力</h3><ul><li>身份认证</li><li>访问授权</li><li>限流</li><li>熔断</li><li>缓存</li><li>指标收集</li><li>日志记录</li></ul><p>这些扩展能力并非只有在 API 网关中才能实现，在后端服务中一样可以。但有些能力放到 API 网关中会更合适。</p><p>例如：身份认证、限流、熔断等，就是在请求还为触及服务时就已经处理了，会更加安全，也会让后端服务更稳固。</p><h3 id="网关的选择"><a href="#网关的选择" class="headerlink" title="网关的选择"></a>网关的选择</h3><p>在 .NET Core 中可以选择的开源网关产品有：Ocelot、Kong、Envoy 等。</p><p>Ocelot：是一个基于.NET Core的轻量级 API 网关，用于构建和管理微服务架构中的 API 网关。作为一个开源项目，Ocelot 提供了一种灵活、可扩展的方式来集中处理请求路由、认证授权、请求转发、负载均衡和缓存等功能。</p><p>Kong：是在 Nginx 中运行的 Lua 程序。得益于 Nginx 的性能优势，Kong 相比于其它的开源 API 网关来说，性能方面是最好的。由于大中型公司对于 Nginx 运维能力都比较强，所以选择 Kong 作为 API 网关，无论是在性能还是在运维的把控力上，都是比较好的选择。</p><p>Envoy：是一个开源的高性能代理和通信中间件，专为云原生应用程序设计。它由 Lyft 开发并于 2017年成为 Cloud Native Computing Foundation（CNCF）的毕业项目之一。虽然 Envoy 本身是用 C++ 编写的，但它可以与任何语言和框架进行集成，包括 .NET Core。</p><p>网关的选择需要能解决当前面临的问题。关于各种网关的使用方式，以及优缺点的对比，后面再进行详细介绍。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>不管是 API 的设计还是代码架构的设计，原则其实都差不多，要能够松耦合、易扩展、在满足现有需求的基础上，再多往前想一步，避免过度设计。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在前后端分离的设计中，不管使用什么语言，后端都需要提供 WebAPI 给前端使用。如果是一个平台级的产品，还有可能需要将平台的公共 API 提供给第三方系统使用，这些都要考虑到 API 的设计。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="http://fwhyy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="架构" scheme="http://fwhyy.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="API" scheme="http://fwhyy.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>这个国庆，又出发了（武汉-平潭）</title>
    <link href="http://fwhyy.com/2023/10/this-national-day-we-set-off-again-wuhan-pingtan/"/>
    <id>http://fwhyy.com/2023/10/this-national-day-we-set-off-again-wuhan-pingtan/</id>
    <published>2023-10-09T01:40:37.000Z</published>
    <updated>2023-10-21T09:41:59.637Z</updated>
    
    <content type="html"><![CDATA[<p>国庆长假结束了。在这个长假里，三个人一台车又出发了。</p><p>对于上班族来说，一年中，国庆假期是难得的适合出行的日子，所以，从 16 年开始，每年的国庆都有出行的计划，直到疫情出现。</p><ul><li>2016 年：长沙-常德-宜昌-荆州</li><li>2017 年：襄阳</li><li>2018 年：十堰-西安</li><li>2019 年：安庆-南浔-杭州-合肥</li></ul><p>当决定在疫情后的第一个国庆长假出行时，就已经做好了大堵车和看人头的准备，我一直认为，在路上发生的一切都属于旅行的一部分。</p><h2 id="路线规划"><a href="#路线规划" class="headerlink" title="路线规划"></a>路线规划</h2><p>关于路线的规划，遵循下面几个原则：</p><p>1、最远到达的距离尽量不超过 1000 公里，否则时间上不太够用；</p><p>2、从武汉到目标城市之间找一个城市中转，回程可以找另一个中转城市；</p><p>3、先大致确定一个方向，然后在地图上找目标城市和中转城市；</p><p>4、规划仅供参考，计划总是赶不上变化，所以酒店不宜一开始把每天的都订好（除非可以免费退的那种），不提前订又会遇到价格高和订不上的问题，需要权衡。</p><p>这个国庆，选择的是东南方向，目的地福州和平潭岛，去的时候经过景德镇，回来的时候从抚州中转，可以去附近的古镇转转，但是从平潭晒了一天太阳后，非常累，临时决定不去抚州了，订了一个资溪的度假酒店，休息调整。</p><p>恰恰是临时决定去的度假酒店，是女儿最喜欢的。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202310082202992.webp"></p><h2 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h2><h3 id="Day1（9-月-29）"><a href="#Day1（9-月-29）" class="headerlink" title="Day1（9 月 29）"></a>Day1（9 月 29）</h3><p>上午十点多出发，下午三点多到达景德镇，一路非常通畅，甚至一些路段一辆车都没有，完全感受不到节日的热闹。</p><p>在酒店安顿好后，便去了陶溪川，对这里印象很深刻：</p><p>1、有非常多的卖瓷器小物件的摊位，而且摊主都是年轻漂亮的小姐姐或帅气的小哥哥；</p><p>2、瓷器小物件价格很贵；</p><p>3、适合拍照。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202310082203208.webp" alt="陶溪川"></p><p>网上查当地的美食，有一家叫「樊记牛骨粉」，看到的所有店子都叫「樊记牛骨粉」，倒也不用挑了，随便进一个即可。牛骨粉、冷粉、饺子粑、油条包糯米，一个店子搞定，油条包糯米挺不错，第二天去抚州弄，又买了一次。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202310082203020.webp"></p><h3 id="Day2（9-月-30）"><a href="#Day2（9-月-30）" class="headerlink" title="Day2（9 月 30）"></a>Day2（9 月 30）</h3><p>离景德镇约 50 公里左右有一个瑶里古镇风景区，距离瑶里古镇十分钟车程的地方还有一处鲜为人知的古朴村落，这个地方叫做—东埠古街古码头。</p><p>这个地方没有商业化，可以看到村民在河里钓鱼、洗衣服。尽管是在国庆期间，也只能看见很少的几个游客。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202310082203056.webp" alt="东埠古街古码头"></p><p>离开东埠古街，继续驱车前往瑶里，果然商业化重的地方人就多，没能找到停车位，然后又临时找到了一个寒溪村。</p><p>寒溪村后面的山上是一片茶园，茶园最高处矗立着一座大型艺术品「大地之灯」，是著名建筑师马岩松的作品。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202310082203882.webp" alt="寒溪村"></p><p>回到市区后，又去了九集小镇（规模巨大的一个夜市）、雕塑瓷厂、、御窑博物馆（需要提前预约）、抚州弄，基本上该去的地方都去了。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202310082203980.webp"></p><p>Day3（10 月 1）</p><p>因为担心堵车，早饭后简单逛了下三宝村就前往福州了，运气很好，高速上依旧没什么车。下午 6 点多到达酒店，酒店在三坊七巷附近。</p><p>晚上步行去了三坊七巷，途中经过了几个居民区，在大榕树的映衬下，非常的静谧，等到了三坊七巷，又人山人海，形成了鲜明的对比。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202310090613273.webp" alt="三坊七巷"></p><p>Day4（10 月 2）</p><p>2 号的安排是福州市内，上下杭、烟台山一圈逛下来已经是下午 4 点多了，地铁加步行的出行模式也让我惊喜的发现福州的地铁是免费的（截止到 12 月）。</p><p>晚上老婆提议去了福州大学附近的永嘉夜市，依然是乘坐免费的地铁。永嘉夜市的人刚刚好，不多不少，在国庆期间，只要人不多，体验就会很好。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202310082204183.webp"></p><p>Day5（10 月 3）</p><p>去海边是这次旅行女儿最期待的，但是否去平潭犹豫了很久，就担心人太多。最后查到一个非常小众的五星沙滩，在去仙人井的途中右转进去，经过一个村庄的小路，就到了，果然不负所望，人非常少。</p><p>中午从五星海滩离开，女儿还依依不舍。</p><p>接着导航风车森林公路，因为是单行线，路边可以停车，我们找了合适位置停好车，下车拍照，可能是因为台风「小犬」的原因，很多人劝退了，人比想象中的少。</p><p>在平潭，我们只去了五星海滩和看了海上风车，想想没有排队、没有拥堵，也就很知足了。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202310082204243.webp"></p><p>Day6（10 月 4）</p><p>没有提前预定抚州的酒店，就可以临时改变行程了。老婆找的资溪度假酒店非常不错，下高速几公里就到了。价格是这次行程中最便宜的，设施和环境是最好的。</p><p>女儿在酒店的儿童游乐场玩的很嗨。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202310090613489.webp" alt="资溪"></p><p>Day7（10 月 5）</p><p>安全抵达武汉。</p><h2 id="跑步"><a href="#跑步" class="headerlink" title="跑步"></a>跑步</h2><p>尽管是十一旅行，跑步可不能拉下。</p><h3 id="景德镇"><a href="#景德镇" class="headerlink" title="景德镇"></a>景德镇</h3><p>10 月 1 号在景德镇跑了 10.01  公里来庆祝国庆。景德镇市区不大，酒店的正前方是陶溪川，我特意从反方向跑，最后还是绕到了陶溪川。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202310090612933.webp"></p><h3 id="福州"><a href="#福州" class="headerlink" title="福州"></a>福州</h3><p>4 号是离开福州的日子，早上 5 点起床，跑向离酒店只有 3 公里的闽江公园，沿着江边跑了一个来回，然后跑回酒店。</p><p>江边的绿道以及城市的道路都被榕树包裹着，6 点多，太阳已经升起，但一点都不晒，非常舒服。</p><p>福州真的是一个非常适合跑步的城市。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202310090612099.webp"></p><h3 id="资溪"><a href="#资溪" class="headerlink" title="资溪"></a>资溪</h3><p>酒店在一个山上，起床后就沿着上山的路往下跑，偶然发现旁边有一条环境优美的绿道，绿道总共 3 公里左右，跑了几个来回。</p><p>可能是因为山里氧气很足，523 的配速，心率只有 138。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202310090612738.webp"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>1、可能是运气，也可能是路线和出行时间选择的好，一路上没有看人头、大堵车；</p><p>2、景德镇挺好，就是东西太贵，陶溪川的陶瓷卖的贵，酒店也贵，房间比床大一点的汉庭要都要 600 多；</p><p>3、福州之前不是很了解，这次印象很不错，特别是到处可见的古榕树让人印象深刻，城市绿化特别好；</p><p>4、如果不是万不得已，最好不要提前把酒店都订了，这样比较灵活，不好玩，随时可以换地方。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;国庆长假结束了。在这个长假里，三个人一台车又出发了。&lt;/p&gt;
&lt;p&gt;对于上班族来说，一年中，国庆假期是难得的适合出行的日子，所以，从 16 年开始，每年的国庆都有出行的计划，直到疫情出现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2016 年：长沙-常德-宜昌-荆州&lt;/li&gt;
&lt;li&gt;2</summary>
      
    
    
    
    <category term="旅行" scheme="http://fwhyy.com/categories/%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="旅行" scheme="http://fwhyy.com/tags/%E6%97%85%E8%A1%8C/"/>
    
    <category term="自驾" scheme="http://fwhyy.com/tags/%E8%87%AA%E9%A9%BE/"/>
    
    <category term="平潭" scheme="http://fwhyy.com/tags/%E5%B9%B3%E6%BD%AD/"/>
    
    <category term="景德镇" scheme="http://fwhyy.com/tags/%E6%99%AF%E5%BE%B7%E9%95%87/"/>
    
  </entry>
  
  <entry>
    <title>B 端软件：开发转产品经理可能遇到的坑</title>
    <link href="http://fwhyy.com/2023/09/b-side-software-development-to-product-managers-may-encounter-pitfalls/"/>
    <id>http://fwhyy.com/2023/09/b-side-software-development-to-product-managers-may-encounter-pitfalls/</id>
    <published>2023-09-26T01:37:57.000Z</published>
    <updated>2023-10-21T09:39:35.982Z</updated>
    
    <content type="html"><![CDATA[<p>有一类产品经理是由开发工程师转岗而来。就拿我来说，自从管理产品团队后，经常会和团队的产品经理进行新功能的讨论、会考虑产品未来的发展方向和路径，慢慢的我的工作重心也更多的偏向产品设计。</p><span id="more"></span><p>本文就聊聊从开发工程师转变为产品经理可能会遇到的问题。</p><h2 id="思维转变"><a href="#思维转变" class="headerlink" title="思维转变"></a>思维转变</h2><p>开发工程师大多是工程思维。</p><p>产品经理需要的是产品思维。</p><p>前些天，在团队内部的一个需求讨论会上，产品经理和开发工程师都有参与，我提出一个需求的 UI  交互思路，开发工程师马上指出：“如果这样做的话，实现上某某地方会调整比较大；某某地方新增的部分实现比较复杂。” </p><p>这就是典型的思考方式没有在一个维度上，从产品的角度，需要考虑的是功能交互的合理性、怎样才能真正解决用户的痛点。在这个前提之下，再考虑应该怎么实现，该怎样去做取舍。</p><p>工程思维更关注效率、如何实现，也就是「How」；而产品思维更关注场景、用户的真实需求，也就是「Why」。 在具体的产品开发中，产品思维和工程思维都很重要，需要将两者结合起来。</p><p>产品思维需要工程的配合与支撑，但如果只有工程思维，最后可能会做出一堆无用的功能。</p><h2 id="保持空杯心态"><a href="#保持空杯心态" class="headerlink" title="保持空杯心态"></a>保持空杯心态</h2><p>不要以为自己的开发经验就是优势，而忽视了产品经理所需要的其他知识和技能。应该将你具备的开发技能变成加分项，而不要变成束缚。</p><p>除了我们熟悉的开发技能，还需要补齐产品经理的基础知识，如市场分析、需求分析、用户研究、产品设计、项目管理等，并且不断学习和实践。</p><h2 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h2><p>对开发工程师来说，沟通能力也很重要，只不过平时的工作只需要按照要求高质量编写代码就行，不会刻意在这个方面去做提升。</p><p>产品经理就不一样，对内要和开发团队进行沟通，对外要和需求方进行沟通，沟通能力是一个必备技能。</p><p>在公司中，不同职位与不同资历的人，彼此的认知都不同，作为产品经理，需要团结团队里的每一个人，让大家朝着同一个目标努力。</p><p>产品经理需要跟所有人解释，某件事的重要性，某个功能为什么存在，某件事为什么要那么做等等。而且，因为认知的差别，你与每个人的沟通方式也要有差别，找到合适的沟通方式才能获得对方支持。</p><h2 id="挖掘真实需求"><a href="#挖掘真实需求" class="headerlink" title="挖掘真实需求"></a>挖掘真实需求</h2><p>客户往往在提需求的时候还会赠送一个解决方案，会告诉你怎么做，而没有说为什么要这么做。开发工程师擅长的就是按照一个实现方案将功能实现。</p><p>当转为产品经理后，就不能被客户牵着鼻子走，需要去挖掘客户背后的真实需求，之前看《有效需求分析》时有个例子现在还记忆深刻：</p><blockquote><p>晚上小孩吵着说要吃饼干，最后给了点面包，小孩吃完就乖乖睡着了，在这里吃饼干是方案，需求是小孩的肚子饿了，当没有饼干时，可以使用第二种方案，给他吃面包也可以解决这个需求问题。</p></blockquote><p>搞懂了小孩的真实需求是肚子饿，而不是吃饼干或面包，事情就好办多。所以，只有了解了真实背景，挖掘了客户背后的诉求，才能设计出能够解决客户痛点的产品功能。</p><h2 id="持续学习"><a href="#持续学习" class="headerlink" title="持续学习"></a>持续学习</h2><p>程序员就是一个需要持续学习的职业，不过当工作需要的技能非常熟练后，往往就疏于学习了。当转产品经理后更是需要有持续学习的能力。</p><p>如果做的是平台型产品，功能不断迭代，需要将不同类型的客户需求收集、分析、转化为平台功能，客户的类型在变化、客户的使用习惯也可能变化，不学习难以应对这种变化。</p><p>如果做的是业务型产品，你需要快速熟悉和了解一个行业，才能和客户、业务专家平等对话，在《麦肯锡方法》中介绍快速了解一个行业可以按下面三个步骤：</p><p>1、总结行业的 100 个关键词；</p><p>2、找三五个专家访谈，了解各种行业问题；</p><p>3、找三五本行业专业书籍，仔细阅读并找出共性。</p><p>上面的三个步骤就是学习的过程。</p><h2 id="注重业务场景"><a href="#注重业务场景" class="headerlink" title="注重业务场景"></a>注重业务场景</h2><p>很多时候，开发工程师把一个功能的代码写完，提交测试了，可能还不清楚这个功能具体是做什么用的。这是因为看到的是点而不是面。</p><p>当转为产品经理后，就需要有全局的思维，从宏观上来思考问题，以满足实际业务场景为目的，然后再逐步分解到具体的功能点。如果还是像做开发时那样，产品会变成一堆零碎功能的堆砌，看似很强大，实则是四不像。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>从开发工程师到产品经理，是一个比较大的跨越，首先需要提高认知维度，知道产品经理和开发工程师的不同，然后再转变思维模式，思维模式变了，最终做事的方式方法自然就会发生变化。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有一类产品经理是由开发工程师转岗而来。就拿我来说，自从管理产品团队后，经常会和团队的产品经理进行新功能的讨论、会考虑产品未来的发展方向和路径，慢慢的我的工作重心也更多的偏向产品设计。&lt;/p&gt;</summary>
    
    
    
    <category term="产品" scheme="http://fwhyy.com/categories/%E4%BA%A7%E5%93%81/"/>
    
    
    <category term="B 端软件" scheme="http://fwhyy.com/tags/b-%E7%AB%AF%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="产品经理" scheme="http://fwhyy.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>从马拉松到越野跑：一次新的挑战</title>
    <link href="http://fwhyy.com/2023/09/from-marathon-to-trail-running-a-new-challenge/"/>
    <id>http://fwhyy.com/2023/09/from-marathon-to-trail-running-a-new-challenge/</id>
    <published>2023-09-12T01:34:58.000Z</published>
    <updated>2023-10-21T09:36:14.321Z</updated>
    
    <content type="html"><![CDATA[<p>从 16 年开始跑步以来大小马拉松比赛参加过十几场，近几年，身边有朋友从公路马拉松转战到了越野跑，在他们的带动下，我对越野跑有了更多的关注和了解。并且和一个朋友一起报了 12 月份的大岩山越野赛 30 公里组别，正式开启了我的越野之路。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309120747336.webp"></p><p>隔行如隔山，一研究发现越野跑跟公路马拉松差别巨大。下面就说说区别和一些注意事项。</p><h2 id="越野跑和公路马拉松的区别"><a href="#越野跑和公路马拉松的区别" class="headerlink" title="越野跑和公路马拉松的区别"></a>越野跑和公路马拉松的区别</h2><p>赛道：公路马拉松是在城市的平坦或略有起伏（上高架、大桥）的道路上进行，而越野跑是在山野、森林、沙漠等自然环境中进行，赛道地形复杂多变，有大量的上下坡，甚至需要攀爬或涉水。</p><p>距离：公路马拉松的标准距离是 42.195 公里，半程马拉松  21.0975  公里。而越野跑的距离则没有固定的标准，从几公里到几百公里都有可能，一般分为短程、中程、长程和超长程等不同级别。像我这次报的 30 公里，就属于难度比较低的级别。</p><p>时间：公路马拉松的比赛时间一般在 2 到 6 个小时之间，而越野跑的比赛时间则可能长达几天甚至几周，需要在山野中过夜或者自行选择休息点。</p><p>难度：公路马拉松的难度主要取决于配速和耐力，而越野跑的难度则涉及到技巧、体能、装备、安全、心理等多方面的因素，需要更高的综合素质和适应能力。</p><p>规则：公路马拉松的规则相对简单明确，主要是按照时间和顺序划分名次和奖励，而越野跑的规则则根据不同的赛事有所差异，一般会有强制装备、累计爬升、限时关门等要求，需要提前了解并遵守。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309120747491.webp"></p><h2 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h2><p>在越野跑中，有强制装备需要检查，这一点和公路马拉松有很大的区别，之所以要检查强制装备，是为了安全考虑，特别是 21  年的  522 事件后，强制装备更加严格了。</p><h3 id="越野鞋"><a href="#越野鞋" class="headerlink" title="越野鞋"></a>越野鞋</h3><p>相比马拉松跑鞋，越野跑鞋需要提供更好的抓地力和保护，以应对更复杂的地形。提及比较多的有下面几个品牌：</p><ul><li>凯乐石  Fuga EX 系列</li><li>HOKA  飞速羚羊系列</li><li>奥创 奥林巴斯系列</li></ul><p>鞋子非常重要，能力范围内需要买好一点的。</p><h3 id="越野跑背包（强制）"><a href="#越野跑背包（强制）" class="headerlink" title="越野跑背包（强制）"></a>越野跑背包（强制）</h3><p>用于装载能量补给、水、急救包等必要物品。30 公里距离的 5L 就够用了，在朋友的推荐下，准备选购 UG 的 6 升越野包。</p><p>如果你的腰包能装下所有强制装备，不用背包也可以。</p><h3 id="号码布和参赛手环（强制）"><a href="#号码布和参赛手环（强制）" class="headerlink" title="号码布和参赛手环（强制）"></a>号码布和参赛手环（强制）</h3><p>识别身份，需要全程佩戴。</p><h3 id="计时芯片（强制）"><a href="#计时芯片（强制）" class="headerlink" title="计时芯片（强制）"></a>计时芯片（强制）</h3><p>计时芯片需要好好保护，否则跑的累死，没有成绩了。需要注意的是保温毯可能对计时芯片有屏蔽作用，不要放在一起。</p><h3 id="急救毯（强制）"><a href="#急救毯（强制）" class="headerlink" title="急救毯（强制）"></a>急救毯（强制）</h3><p>应该是超过  30 公里的距离必须全程携带，关键时候可以救命。使用时建议尽量贴身，打结后套住头部，然后包覆核心躯干，再穿上外套，防风，隔湿，保温。</p><p>急救毯尺寸不小于 1.5m x 2.0m 。</p><p>急救毯属于消耗类强制装备，使用后不允许丢弃，须凭已消耗的装备或装备包装到达站点更换新的装备。</p><h3 id="救生口哨（强制）"><a href="#救生口哨（强制）" class="headerlink" title="救生口哨（强制）"></a>救生口哨（强制）</h3><p>大部分越野包都有配备，如果使用的是腰包，需要单独佩戴。仅在遇到危险，需要帮助时使用。</p><h3 id="急救包：弹力绷带、无菌敷料（强制）"><a href="#急救包：弹力绷带、无菌敷料（强制）" class="headerlink" title="急救包：弹力绷带、无菌敷料（强制）"></a>急救包：弹力绷带、无菌敷料（强制）</h3><ul><li>弹力绷带用于局部固定及加压包扎，规格要求不小于 100cm X 5cm</li><li>无菌敷料主要用于伤口止血，防止污染，规格要求不小于 10cm X 10cm</li></ul><p>急救用品也属于消耗类强制装备，可自用或给需要帮助的选手使用，消耗后凭有效证明可到补给站补充。</p><h3 id="智能手机及充电宝（强制）"><a href="#智能手机及充电宝（强制）" class="headerlink" title="智能手机及充电宝（强制）"></a>智能手机及充电宝（强制）</h3><ul><li>手机的手机号码需和报名信息填写的号码一致</li><li>智能手机需具备查看官方发布的赛事轨迹和导航的功能</li><li>比赛期间需保证手机处于可通联状态</li><li>预估自己手机的耗电情况，随身携带足量的充电宝确保手机全程可用，有的赛事会强制要求带充电宝</li></ul><h3 id="水具（强制）"><a href="#水具（强制）" class="headerlink" title="水具（强制）"></a>水具（强制）</h3><ul><li>很多越野包自带软水壶，没有软水壶的，搞两瓶矿泉水插在越野包上也是可以的</li><li>水具必须可密封</li><li>容量必须大于强制装备的规定，不同赛事和组别要求不一样</li><li>除了软水壶，还需要便携式水杯</li></ul><h3 id="防水防风连帽夹克（强制）"><a href="#防水防风连帽夹克（强制）" class="headerlink" title="防水防风连帽夹克（强制）"></a>防水防风连帽夹克（强制）</h3><ul><li>帽子与身体部分必须为一体结构</li><li>服装面料为防水材质，所有的缝线处须有压胶密封</li></ul><h3 id="头灯"><a href="#头灯" class="headerlink" title="头灯"></a>头灯</h3><p>通常  50  公里或以上组别才需要头灯。</p><h3 id="长袖保暖上衣（强制）"><a href="#长袖保暖上衣（强制）" class="headerlink" title="长袖保暖上衣（强制）"></a>长袖保暖上衣（强制）</h3><p> 建议服装面辅料为抓绒、羊毛或其他具有保暖速干效果的材质，保暖上衣重量不低于200g。</p><h3 id="应急能量食品"><a href="#应急能量食品" class="headerlink" title="应急能量食品"></a>应急能量食品</h3><p>不一定是能量胶，所有高热量的食品都可以，有的赛事会要求必须携带不低于其组别要求数量（能量值）的能量食品。</p><h3 id="手表"><a href="#手表" class="headerlink" title="手表"></a>手表</h3><p>我用的佳明 245 没有越野功能，不过这次有人带着一起跑，倒不着急买新的手表，目前关注的手表：佳明  255、265 、955，高驰的  apex 2 pro  等。</p><h3 id="其他装备"><a href="#其他装备" class="headerlink" title="其他装备"></a>其他装备</h3><p>全指手套、帽子、太阳镜、登山杖，防晒霜，防晒臂套等。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309120747385.webp"></p><h2 id="越野跑训练"><a href="#越野跑训练" class="headerlink" title="越野跑训练"></a>越野跑训练</h2><p>从马拉松转到越野跑，训练的重点应该从速度和耐力转向力量和平衡，当然为了能跟得上朋友的速度，速度也需要有所提升。</p><p>下面是我的计划：</p><p>1、比赛时间为  12 月 3 号，还有  3  个月的时间可以训练。</p><p>2、平均每个月的跑量在 200 公里以上，增加跑量是因为越野跑需要更强的耐力和体能，不过在训练的同时也需要注意休息，让身体能够恢复。</p><p>3、每周一到两次的间歇跑，400m X 10 ，配速  430，通过间歇跑来提升下速度。</p><p>4、3  个月内，至少两次长距离的  LSD（25～28 公里）。</p><p>5、加强核心力量，可以提高你在复杂地形中的稳定性和平衡性，可以进行卷腹、单杠提膝等练习。</p><p>6、加强腿部力量，即便是公路马拉松，腿部力量也非常重要，可以减少受伤的风险，可以进行深蹲、爬楼等练习。</p><p>7、每周至少一次的爬升训练，选择一些有坡度的路段或者楼梯进行上下跑，需要注意调整步幅和节奏，避免过度用力或气喘。</p><p>8、技巧练习，越野跑中有很多的技巧，如下坡跑、越障跑、使用登山杖等，这些技巧都需要你通过实践和练习来掌握和熟练。</p><p>9、找个山路跑跑，适应下环境。</p><h2 id="著名的越野赛事"><a href="#著名的越野赛事" class="headerlink" title="著名的越野赛事"></a>著名的越野赛事</h2><p>全球有很多著名的越野赛事，例如：</p><ul><li>UTMB（Ultra-Trail du Mont-Blanc）：这是世界上最著名的越野跑赛事之一，每年在法国、意大利、瑞士三国交界处的阿尔卑斯山脉举行，以环绕欧洲最高峰勃朗峰为特色，共有 7 个不同级别的比赛，从 15 公里到 170 公里不等，吸引了来自全球的顶尖选手和爱好者参与。</li><li>WSER（Western States Endurance Run）：这是世界上最古老的100英里（约161公里）越野跑赛事之一，每年在美国加利福尼亚州举行，以穿越西部山脉和河谷为特色，从海拔2400米的高山到海拔400米的平原，温差可达40摄氏度，是一项极具挑战性的赛事。</li><li>UTWT（Ultra-Trail World Tour）：这是一个国际性的越野跑系列赛事，每年在全球不同的地点举行多场超长程（超过100公里）的比赛，包括 UTMB、WSER 等知名赛事在内，为选手提供了一个展示自己和与其他选手竞争的平台。</li></ul><p>国内的有香港 100、崇礼 168、莫干山越野挑战赛、柴古唐斯越野挑战赛等。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309120749742.webp"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、参赛选手在领取参赛物品前，必须携带安全强制装备清单中所有装备接受检查，不符合条件者将无法领取参赛物品。</p><p>2、选手在比赛过程中必须全程携带与所参赛组别对应的所有安全强制装备，组委会将在起终点及赛道中进行安全强制装备检查，参赛选手须无条件配合，检查不合格者将接受组委会的处罚。</p><p>3、消耗类强制装备（急救毯、能量食品、急救包），使用后不允许丢弃，须凭已消耗的装备或装备包装到达站点更换新的装备。</p><p>4、组委会有权在赛前根据天气情况，追加强装的种类及数量，注意官方信息的发布。</p><p>5、安全第一，越野跑中可能会遇到各种危险和困难，如迷路、受伤、脱水、低温、高原反应等，所以你需要做好充分的准备和预防，携带必要的装备和物品，并且遵守赛事规则和指示，在遇到问题时及时求助或放弃。</p><p>6、尊重自然，越野跑中你会接触到很多美丽而脆弱的自然景观和生态系统，所以你需要尊重自然，保护环境，不要破坏植被或动物，不要乱扔垃圾或其他物品，并且尽量减少对自然资源的消耗。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>敬畏自然，安全最重要，希望 12 月份能安全完赛，也期待明年能挑战更高级别的赛事。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从 16 年开始跑步以来大小马拉松比赛参加过十几场，近几年，身边有朋友从公路马拉松转战到了越野跑，在他们的带动下，我对越野跑有了更多的关注和了解。并且和一个朋友一起报了 12 月份的大岩山越野赛 30 公里组别，正式开启了我的越野之路。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;h</summary>
      
    
    
    
    <category term="跑步" scheme="http://fwhyy.com/categories/%E8%B7%91%E6%AD%A5/"/>
    
    
    <category term="马拉松" scheme="http://fwhyy.com/tags/%E9%A9%AC%E6%8B%89%E6%9D%BE/"/>
    
    <category term="跑步" scheme="http://fwhyy.com/tags/%E8%B7%91%E6%AD%A5/"/>
    
    <category term="越野跑" scheme="http://fwhyy.com/tags/%E8%B6%8A%E9%87%8E%E8%B7%91/"/>
    
  </entry>
  
  <entry>
    <title>分享几个网站和工具（202309）</title>
    <link href="http://fwhyy.com/2023/09/share-some-website-and-tools-202309/"/>
    <id>http://fwhyy.com/2023/09/share-some-website-and-tools-202309/</id>
    <published>2023-09-05T01:32:48.000Z</published>
    <updated>2023-10-21T09:33:49.990Z</updated>
    
    <content type="html"><![CDATA[<p>最近又收集了一些工具和站点，分享给大家。</p><span id="more"></span><h2 id="Wrokout"><a href="#Wrokout" class="headerlink" title="Wrokout"></a>Wrokout</h2><p><a href="https://workout.lol/">https://workout.lol</a></p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050626666.webp"></p><p>这个一个辅助锻炼的网站，选择锻炼器械，也包括自重，然后选择需要锻炼的部位，就会给出一些列的视频教程。</p><p>对于健身初学者来说，很有帮助。</p><h2 id="roadmap"><a href="#roadmap" class="headerlink" title="roadmap"></a>roadmap</h2><p><a href="https://roadmap.sh/">https://roadmap.sh/</a></p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050626549.webp"></p><p>一个技术学习路线图的网站，提供前端、后端、全栈等，还有各种具体的技术，如：Python、.NET Core、Vue 等。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050626921.webp"></p><p>每一个知识点的详情页面中会提供相关的学习资源。</p><h2 id="Youtube-中文配音"><a href="#Youtube-中文配音" class="headerlink" title="Youtube 中文配音"></a>Youtube 中文配音</h2><p><a href="https://www.youtube-dubbing.com/">https://www.youtube-dubbing.com/</a></p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050627656.webp"></p><p>这是一款 Chrome 浏览器插件，安装插件后，在 YouTube 视频的下方会出现「开始翻译播放」，点击此按钮，稍等片刻，视频语音会变成 AI 的翻译后的中文语音：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050627765.webp"></p><h2 id="TypeScript-开源教程"><a href="#TypeScript-开源教程" class="headerlink" title="TypeScript 开源教程"></a>TypeScript 开源教程</h2><p><a href="https://github.com/wangdoc/typescript-tutorial">https://github.com/wangdoc/typescript-tutorial</a></p><p><a href="https://wangdoc.com/">https://wangdoc.com/</a></p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050627590.webp"></p><p>TypeScript 是由 Microsoft 开发和维护的编程语言，它是 JavaScript 的超集，它在 JavaScript 的基础上添加了一些新的特性和语法，使开发者能够更容易编写可靠、可维护的代码。</p><p>这本书的作者是阮一峰，阮一峰的博客很早就在关注，一个很大的特点就是很擅长深入浅出地去讲解各种知识点。</p><h2 id="APP-截图网站"><a href="#APP-截图网站" class="headerlink" title="APP  截图网站"></a>APP  截图网站</h2><p><a href="https://uinotes.com/pin">https://uinotes.com/pin</a></p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050627492.webp"></p><p>一个 APP UI 截图资源的网站，可以按照公司和行业进行筛选。多看看一些优秀的设计方案，对产品经理激发灵感很有帮助。</p><h2 id="大厂关停服务"><a href="#大厂关停服务" class="headerlink" title="大厂关停服务"></a>大厂关停服务</h2><p><a href="https://killedby.tech/">https://killedby.tech</a></p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050628220.webp"></p><p>记录一些大公司：谷歌、苹果和微软等已经关停或未来会关停的产品和服务，可以按时间轴去进行查看。</p><h2 id="企典-钉钉出品的免费企业信息查询工具"><a href="#企典-钉钉出品的免费企业信息查询工具" class="headerlink" title="企典-钉钉出品的免费企业信息查询工具"></a>企典-钉钉出品的免费企业信息查询工具</h2><p><a href="https://dingtalk.com/qidian/home">https://dingtalk.com/qidian/home</a></p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050628581.webp"></p><p>天眼查、企查查的竞品，刚上线不久，趁现在还是免费，可以赶紧查起来。</p><h2 id="Gpt-Demo-发现最新最好用的-AI-工具"><a href="#Gpt-Demo-发现最新最好用的-AI-工具" class="headerlink" title="Gpt Demo - 发现最新最好用的 AI 工具"></a>Gpt Demo - 发现最新最好用的 AI 工具</h2><p><a href="https://www.gptdemo.net/cn/">https://www.gptdemo.net/cn/</a></p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050628696.webp"></p><p>一个帮助我们了解现在各种 AI 工具动态的网站，网站提供了非常全面的 AI 工具分类以及标签供你选择，包括功能介绍、免费与否和用户评论。</p><p>在现在 AI 工具层出不穷的现状下，用这个网站正好可以做下筛选。</p><h2 id="AI-新闻聚合网站"><a href="#AI-新闻聚合网站" class="headerlink" title="AI 新闻聚合网站"></a>AI 新闻聚合网站</h2><p><a href="https://allainews.com/">https://allainews.com/</a></p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050629183.webp"></p><p>如果你对人工智能、机器学习、深度学习、NLP 等有兴趣，那么这个网站可以帮你更好了解相关的信息和发展情况。</p><p>汇聚了各类新闻、博客、播客等。</p><h2 id="Pake-版本的-YouTube-Music"><a href="#Pake-版本的-YouTube-Music" class="headerlink" title="Pake 版本的 YouTube Music"></a>Pake 版本的 YouTube Music</h2><p><a href="https://github.com/tw93/Pake">https://github.com/tw93/Pake</a></p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050629532.webp"></p><p>YouTube Music 没有 Mac 版，最近发现 Pake 的 Github 主页上已经提供了 YouTube Music 客户的下载。</p><p>Pake 是一个可以将网页应用打包为客户端的开源项目，我在 Mac 上使用即刻就是使用 Pake 制作的。</p><h2 id="Awesome-Web-Desktops"><a href="#Awesome-Web-Desktops" class="headerlink" title="Awesome Web Desktops"></a>Awesome Web Desktops</h2><p><a href="https://simone.computer/#/webdesktops">https://simone.computer/#/webdesktops</a></p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050631549.webp"></p><p>可以在这个网站中体验 160 多个桌面操作系统，上图是 Windows 98 的系统界面。开发者非常热衷于复古计算机，并且非常喜欢 90 年代和 2000 年代初的仿拟设计用户界面。</p><p>包括开发者的主页也是这个风格：<a href="https://simone.computer/">https://simone.computer</a></p><h2 id="一款内置-AI-的-PDF-工具"><a href="#一款内置-AI-的-PDF-工具" class="headerlink" title="一款内置 AI 的 PDF 工具"></a>一款内置 AI 的 PDF 工具</h2><p><a href="https://www.pdfgear.com/">https://www.pdfgear.com/</a></p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050631082.webp"></p><p>支持 Windows/macOS/ios，并且都是免费的。它支持数十种格式与 PDF 之间的转换，并且支持编辑、压缩、签名、文本提取、OCR文字识别等功能。</p><p>亮点就是接入了 AI 聊天机器人，没有聊天限制，扫描版一样可以解析。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050631313.webp"></p><h2 id="Spacedrive"><a href="#Spacedrive" class="headerlink" title="Spacedrive"></a>Spacedrive</h2><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202309050632164.webp"></p><p>一直都觉得 Mac 上的访达不太好用，最近发现了 Spacedrive 这个工具，不过还需要排队。</p><p>Spacedrive 是一个强大的文件浏览器，可以帮助你更好地管理和组织你的文件。支持 macOS、Windows、Linux、iOS 和 Android。</p><p>期待早日可以试用。</p><h2 id="一点资料"><a href="#一点资料" class="headerlink" title="一点资料"></a>一点资料</h2><p><a href="https://docs.qq.com/aio/DWVRkZ1RUWHRsdU1J?p=3xevUv9be6t0B1pY9ZK5AA">https://docs.qq.com/aio/DWVRkZ1RUWHRsdU1J?p=3xevUv9be6t0B1pY9ZK5AA</a></p><p>一些大师关于写作的言论，有王小波、莫言、余华、史铁生等。</p><p><a href="https://s75w5y7vut.feishu.cn/docs/doccn3BatnScBJe7wD7K3S5poFf">https://s75w5y7vut.feishu.cn/docs/doccn3BatnScBJe7wD7K3S5poFf</a></p><p>认知偏差知识手册。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近又收集了一些工具和站点，分享给大家。&lt;/p&gt;</summary>
    
    
    
    <category term="成长" scheme="http://fwhyy.com/categories/%E6%88%90%E9%95%BF/"/>
    
    
    <category term="分享" scheme="http://fwhyy.com/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="网站" scheme="http://fwhyy.com/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>博客园，挺住</title>
    <link href="http://fwhyy.com/2023/08/cnblogs-hold-on/"/>
    <id>http://fwhyy.com/2023/08/cnblogs-hold-on/</id>
    <published>2023-08-29T01:30:31.000Z</published>
    <updated>2023-10-21T09:31:52.952Z</updated>
    
    <content type="html"><![CDATA[<p>昨天才看到博客园团队在 8 月 16 号的发文：《弹尽粮绝，会员救园：会员上线，命悬一线》。第一时间就充会员支持了，尽管会员功能还不完善，需要添加企业微信人工处理。</p><span id="more"></span><p>我算是博客园的老用户了，06 年注册，发表过文章 300 多篇，曾经也到过前 100 名，近些年玩独立博客、写公众号后，使用频率就没那么高了，排名也因后来规则改变下降到 2000 多。但对博客园，依然怀有深深的感情。</p><p>今天又逛了逛园子，回想起之前的往事，这些名字仍然历历在目：老赵、张善友、宝玉、Terrylee、  artech、 anytao、路过秋天、金色海洋 、吉日、灵感之源、装配脑袋、司徒正美等。如今，也就张善友和宝玉近期在园子中有更新。</p><p>现在各类网站都充斥着广告、带货、周边、卖课，博客园算是一股清流，可能也正是如此，才会导致今天的经营困难。</p><p>希望博客园能度过这次难关，也能找到好的商业模式，慢慢走向正轨。虽然不常回去，但当我想回的时候，他还能安安静静的在那里。</p><p>购买会员通道：<a href="https://cnblogs.vip/">https://cnblogs.vip</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天才看到博客园团队在 8 月 16 号的发文：《弹尽粮绝，会员救园：会员上线，命悬一线》。第一时间就充会员支持了，尽管会员功能还不完善，需要添加企业微信人工处理。&lt;/p&gt;</summary>
    
    
    
    <category term="成长" scheme="http://fwhyy.com/categories/%E6%88%90%E9%95%BF/"/>
    
    
    <category term="博客园" scheme="http://fwhyy.com/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>插件开发：实现 PicGo 图片转 webp 格式</title>
    <link href="http://fwhyy.com/2023/08/plugin-development-implement-picgo-image-to-webp-format-1/"/>
    <id>http://fwhyy.com/2023/08/plugin-development-implement-picgo-image-to-webp-format-1/</id>
    <published>2023-08-28T01:28:07.000Z</published>
    <updated>2023-10-21T09:29:31.012Z</updated>
    
    <content type="html"><![CDATA[<p>我写一些文档或者公众号文章使用的是  Typora，如果涉及到文章中有图片时，直接复制图片粘贴到 Typora 中，然后使用  PicGo 上传到图床。</p><p>这样不管是发布公众号（公众号会从图床下载然后上传）还是博客，图片地址的问题就解决了。但会有另外一个问题，网上下载的图片或者截图的图片通常比较大，现在我都是手动将文件转为 webp 格式，然后重新复制到 Typora 中，非常麻烦。</p><span id="more"></span><p>后来发现  PicGo 有插件机制，一个想法就诞生了：</p><ul><li>在 Typora 点击右键上传图片时，PicGo  插件接收到图片地址并将图片转为 webp 格式，存储到本地，返回给  PicGo  新的 webp 文件的地址；</li><li>PicGo 接收到新的地址进行图床的上传。</li></ul><p>下面就来讲解下怎样来实现这个插件的开发。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>node：v16.18.1</li><li>npm：9.1.2</li><li>PicGo：2.3.1</li><li>TypeScript：5.1.6</li></ul><h2 id="写代码前的准备"><a href="#写代码前的准备" class="headerlink" title="写代码前的准备"></a>写代码前的准备</h2><p>1、全局安装  picgo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install picgo -g</span><br></pre></td></tr></table></figure><p>2、使用  picgo  命令创建一个插件项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo init plugin convert-to-webp</span><br></pre></td></tr></table></figure><p>PicGo 的插件名称要求必须带有前缀：<code>picgo-plugin</code> ，否则不能识别，使用  picgo 脚手架创建插件项目时，后面的名称只需写真实名称即可，否则前缀会重复。</p><p>执行上面命令后，会有命令行的向导，需要填写一些关键信息，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">? Plugin name: convert-to-webp</span><br><span class="line">? Plugin description: convert image to webp</span><br><span class="line">? author: oec2003</span><br><span class="line">? Choose modules you want to develop:</span><br><span class="line"> ◯ uploader</span><br><span class="line"> ◯ transformer</span><br><span class="line">❯◯ beforeTransformPlugins</span><br><span class="line"> ◯ beforeUploadPlugins</span><br><span class="line"> ◯ afterUploadPlugins</span><br><span class="line"> </span><br><span class="line">Your plugin is just used in CLI? (Y/n) n</span><br><span class="line">? Use TS or JS? (Use arrow keys)</span><br><span class="line">❯ Yes, use TS Project(recommended) </span><br><span class="line">  Yes, use JS Project </span><br><span class="line">? Your plugin has some shortcut for GUI? (Y/n) n</span><br></pre></td></tr></table></figure><p>3、向导中推荐使用  TS  语言，我这里使用的就是默认选项，所以需要全局安装  typescript：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>4、本插件的目的需要将上传的图片转为  webp  格式，需要  sharp 库，安装命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g sharp</span><br><span class="line">npm install @types/sharp --save-dev</span><br></pre></td></tr></table></figure><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>1、使用脚手架创建的代码只有一个 index.ts 文件，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272138599.webp"></p><p>2、在根目录中执行<code>npm install</code> 安装依赖。</p><p>3、index.ts 代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> sharp <span class="keyword">from</span> <span class="string">&#x27;sharp&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promises <span class="keyword">as</span> fs &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PicGo &#125; <span class="keyword">from</span> <span class="string">&#x27;picgo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> = <span class="function">(<span class="params">ctx: PicGo</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> handle = <span class="keyword">async</span> (ctx: PicGo): <span class="built_in">Promise</span>&lt;PicGo&gt; =&gt; &#123;</span><br><span class="line">    <span class="comment">// ctx.input 是一个数组，因为都是单个文件上传，所以取数组中第一个数据就行</span></span><br><span class="line">    <span class="comment">// imgPath 得到的就是文件的本地路径</span></span><br><span class="line">    <span class="keyword">let</span> [imgPath] = ctx.input;</span><br><span class="line">    <span class="keyword">let</span> imgExt= path.extname(imgPath);</span><br><span class="line">    <span class="comment">//如果上传的就是 webp 格式的文件直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (imgExt === <span class="string">&#x27;.webp&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将文件转为 webp 格式的流</span></span><br><span class="line">    <span class="keyword">let</span> imgBuffer = <span class="keyword">await</span> sharp(imgPath)</span><br><span class="line">      .webp()</span><br><span class="line">      .toBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到 webp 文件的本地路径</span></span><br><span class="line">    <span class="keyword">const</span> webpPath =path.join(path.dirname(imgPath), path.basename(imgPath, imgExt) + <span class="string">&#x27;.webp&#x27;</span>);</span><br><span class="line">    <span class="comment">//将 webp 文件写入本地，我是想要在本地保留 webp 文件的备份</span></span><br><span class="line">    <span class="comment">// 如果不需要，也可以在 afterUploadPlugins 事件中将本地文件删除</span></span><br><span class="line">    <span class="keyword">await</span> fs.writeFile(webpPath, imgBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将新的 webp 地址包装为数组返回给  ctx 的 input 对象 </span></span><br><span class="line">    ctx.input = [webpPath]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ctx;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> register = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//注意：此处需要使用 beforeTransformPlugins 事件</span></span><br><span class="line">    ctx.helper.beforeTransformPlugins.register(<span class="string">&#x27;picgo-plugin-convert-to-webp&#x27;</span>, &#123;</span><br><span class="line">      handle</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    register</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、执行命令 <code>npm run build</code> 进行打包，打包后会生成 dist 目录，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272138899.webp"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1、在 PicGo 的插件设置中，导入本地插件：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272139541.webp"></p><p>2、目录选择 dist 目录所在的目录：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272139700.webp"></p><p>3、安装成功后如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272139512.webp"></p><p>4、这时可以截图粘贴到 Typora 中，点击右键上传图片：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272139551.webp"></p><p>上传成功后，会发现已经变成了 webp 格式：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272139762.webp"></p><h2 id="更新插件"><a href="#更新插件" class="headerlink" title="更新插件"></a>更新插件</h2><p>1、如果插件的代码有修改，可以在 package.json 文件中升级一个版本，重新打包：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272141636.webp"></p><p>2、卸载插件，不卸载进行本地插件导入，会提示成功，但实际没有成功：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272143098.webp"></p><p>3、重新本地导入插件。</p><p>4、导入成功后，需要更新插件：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272139721.webp"></p><p>5、更新成功后，需要重启才能生效：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272140389.webp"></p><p>6、重启后，如果看到版本变为 1.0.1 表示更新成功：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272140314.webp"></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>在导入本地插件或者进行图片上传的过程中，有可能会出现错误，错误日志会记录在 picgo.log 文件中，在 Mac 系统中，该文件的路径如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Library/Application\ Support/picgo/picgo.log</span><br></pre></td></tr></table></figure><p>比如：我们在代码中可以通过下面的代码来输出日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.log.info(&#x27;ctx.input.path&#x27;+imgPath)</span><br></pre></td></tr></table></figure><p>在 picgo.log 中就会输出日志：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272140648.webp"></p><p>通过这个日志文件的内容，可以进行错误的排查。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>本插件的源码已经上传到 Github，地址如下：</p><p><a href="https://github.com/oec2003/picgo-plugin-convert-to-webp">https://github.com/oec2003/picgo-plugin-convert-to-webp</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我写一些文档或者公众号文章使用的是  Typora，如果涉及到文章中有图片时，直接复制图片粘贴到 Typora 中，然后使用  PicGo 上传到图床。&lt;/p&gt;
&lt;p&gt;这样不管是发布公众号（公众号会从图床下载然后上传）还是博客，图片地址的问题就解决了。但会有另外一个问题，网上下载的图片或者截图的图片通常比较大，现在我都是手动将文件转为 webp 格式，然后重新复制到 Typora 中，非常麻烦。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="http://fwhyy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="插件开发" scheme="http://fwhyy.com/tags/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="PicGo" scheme="http://fwhyy.com/tags/picgo/"/>
    
  </entry>
  
  <entry>
    <title>插件开发：实现 PicGo 图片转 webp 格式</title>
    <link href="http://fwhyy.com/2023/08/plugin-development-implement-picgo-image-to-webp-format/"/>
    <id>http://fwhyy.com/2023/08/plugin-development-implement-picgo-image-to-webp-format/</id>
    <published>2023-08-28T01:18:14.000Z</published>
    <updated>2023-08-28T03:19:28.719Z</updated>
    
    <content type="html"><![CDATA[<p>我写一些文档或者公众号文章使用的是  Typora，如果涉及到文章中有图片时，直接复制图片粘贴到 Typora 中，然后使用  PicGo 上传到图床。</p><span id="more"></span><p>这样不管是发布公众号（公众号会从图床下载然后上传）还是博客，图片地址的问题就解决了。但会有另外一个问题，网上下载的图片或者截图的图片通常比较大，现在我都是手动将文件转为 webp 格式，然后重新复制到 Typora 中，非常麻烦。</p><p>后来发现  PicGo 有插件机制，一个想法就诞生了：</p><ul><li>在 Typora 点击右键上传图片时，PicGo  插件接收到图片地址并将图片转为 webp 格式，存储到本地，返回给  PicGo  新的 webp 文件的地址；</li><li>PicGo 接收到新的地址进行图床的上传。</li></ul><p>下面就来讲解下怎样来实现这个插件的开发。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>node：v16.18.1</li><li>npm：9.1.2</li><li>PicGo：2.3.1</li><li>TypeScript：5.1.6</li></ul><h2 id="写代码前的准备"><a href="#写代码前的准备" class="headerlink" title="写代码前的准备"></a>写代码前的准备</h2><p>1、全局安装  picgo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install picgo -g</span><br></pre></td></tr></table></figure><p>2、使用  picgo  命令创建一个插件项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo init plugin convert-to-webp</span><br></pre></td></tr></table></figure><p>PicGo 的插件名称要求必须带有前缀：<code>picgo-plugin</code> ，否则不能识别，使用  picgo 脚手架创建插件项目时，后面的名称只需写真实名称即可，否则前缀会重复。</p><p>执行上面命令后，会有命令行的向导，需要填写一些关键信息，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">? Plugin name: convert-to-webp</span><br><span class="line">? Plugin description: convert image to webp</span><br><span class="line">? author: oec2003</span><br><span class="line">? Choose modules you want to develop:</span><br><span class="line"> ◯ uploader</span><br><span class="line"> ◯ transformer</span><br><span class="line">❯◯ beforeTransformPlugins</span><br><span class="line"> ◯ beforeUploadPlugins</span><br><span class="line"> ◯ afterUploadPlugins</span><br><span class="line"> </span><br><span class="line">Your plugin is just used in CLI? (Y/n) n</span><br><span class="line">? Use TS or JS? (Use arrow keys)</span><br><span class="line">❯ Yes, use TS Project(recommended) </span><br><span class="line">  Yes, use JS Project </span><br><span class="line">? Your plugin has some shortcut for GUI? (Y/n) n</span><br></pre></td></tr></table></figure><p>3、向导中推荐使用  TS  语言，我这里使用的就是默认选项，所以需要全局安装  typescript：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>4、本插件的目的需要将上传的图片转为  webp  格式，需要  sharp 库，安装命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g sharp</span><br><span class="line">npm install @types/sharp --save-dev</span><br></pre></td></tr></table></figure><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>1、使用脚手架创建的代码只有一个 index.ts 文件，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272138599.webp"></p><p>2、在根目录中执行<code>npm install</code> 安装依赖。</p><p>3、index.ts 代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> sharp <span class="keyword">from</span> <span class="string">&#x27;sharp&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promises <span class="keyword">as</span> fs &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PicGo &#125; <span class="keyword">from</span> <span class="string">&#x27;picgo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> = <span class="function">(<span class="params">ctx: PicGo</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> handle = <span class="keyword">async</span> (ctx: PicGo): <span class="built_in">Promise</span>&lt;PicGo&gt; =&gt; &#123;</span><br><span class="line">    <span class="comment">// ctx.input 是一个数组，因为都是单个文件上传，所以取数组中第一个数据就行</span></span><br><span class="line">    <span class="comment">// imgPath 得到的就是文件的本地路径</span></span><br><span class="line">    <span class="keyword">let</span> [imgPath] = ctx.input;</span><br><span class="line">    <span class="keyword">let</span> imgExt= path.extname(imgPath);</span><br><span class="line">    <span class="comment">//如果上传的就是 webp 格式的文件直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (imgExt === <span class="string">&#x27;.webp&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将文件转为 webp 格式的流</span></span><br><span class="line">    <span class="keyword">let</span> imgBuffer = <span class="keyword">await</span> sharp(imgPath)</span><br><span class="line">      .webp()</span><br><span class="line">      .toBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到 webp 文件的本地路径</span></span><br><span class="line">    <span class="keyword">const</span> webpPath =path.join(path.dirname(imgPath), path.basename(imgPath, imgExt) + <span class="string">&#x27;.webp&#x27;</span>);</span><br><span class="line">    <span class="comment">//将 webp 文件写入本地，我是想要在本地保留 webp 文件的备份</span></span><br><span class="line">    <span class="comment">// 如果不需要，也可以在 afterUploadPlugins 事件中将本地文件删除</span></span><br><span class="line">    <span class="keyword">await</span> fs.writeFile(webpPath, imgBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将新的 webp 地址包装为数组返回给  ctx 的 input 对象 </span></span><br><span class="line">    ctx.input = [webpPath]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ctx;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> register = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//注意：此处需要使用 beforeTransformPlugins 事件</span></span><br><span class="line">    ctx.helper.beforeTransformPlugins.register(<span class="string">&#x27;picgo-plugin-convert-to-webp&#x27;</span>, &#123;</span><br><span class="line">      handle</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    register</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、执行命令 <code>npm run build</code> 进行打包，打包后会生成 dist 目录，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272138899.webp"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1、在 PicGo 的插件设置中，导入本地插件：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272139541.webp"></p><p>2、目录选择 dist 目录所在的目录：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272139700.webp"></p><p>3、安装成功后如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272139512.webp"></p><p>4、这时可以截图粘贴到 Typora 中，点击右键上传图片：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272139551.webp"></p><p>上传成功后，会发现已经变成了 webp 格式：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272139762.webp"></p><h2 id="更新插件"><a href="#更新插件" class="headerlink" title="更新插件"></a>更新插件</h2><p>1、如果插件的代码有修改，可以在 package.json 文件中升级一个版本，重新打包：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272141636.webp"></p><p>2、卸载插件，不卸载进行本地插件导入，会提示成功，但实际没有成功：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272143098.webp"></p><p>3、重新本地导入插件。</p><p>4、导入成功后，需要更新插件：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272139721.webp"></p><p>5、更新成功后，需要重启才能生效：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272140389.webp"></p><p>6、重启后，如果看到版本变为 1.0.1 表示更新成功：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272140314.webp"></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>在导入本地插件或者进行图片上传的过程中，有可能会出现错误，错误日志会记录在 picgo.log 文件中，在 Mac 系统中，该文件的路径如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Library/Application\ Support/picgo/picgo.log</span><br></pre></td></tr></table></figure><p>比如：我们在代码中可以通过下面的代码来输出日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.log.info(&#x27;ctx.input.path&#x27;+imgPath)</span><br></pre></td></tr></table></figure><p>在 picgo.log 中就会输出日志：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308272140648.webp"></p><p>通过这个日志文件的内容，可以进行错误的排查。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>本插件的源码已经上传到 Github，地址如下：</p><p><a href="https://github.com/oec2003/picgo-plugin-convert-to-webp">https://github.com/oec2003/picgo-plugin-convert-to-webp</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我写一些文档或者公众号文章使用的是  Typora，如果涉及到文章中有图片时，直接复制图片粘贴到 Typora 中，然后使用  PicGo 上传到图床。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="http://fwhyy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="插件开发" scheme="http://fwhyy.com/tags/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="PicGo" scheme="http://fwhyy.com/tags/picgo/"/>
    
  </entry>
  
  <entry>
    <title>软件推荐：Mac神器  Raycast</title>
    <link href="http://fwhyy.com/2023/08/software-recommendation-mac-artifact-raycast/"/>
    <id>http://fwhyy.com/2023/08/software-recommendation-mac-artifact-raycast/</id>
    <published>2023-08-21T01:12:17.000Z</published>
    <updated>2023-08-28T03:13:36.871Z</updated>
    
    <content type="html"><![CDATA[<p>Raycast 是一款 Mac 上的启动器工具，功能类似于 Mac 自带的 「焦点（Spotlight）」。关于启动器工具，如果你没使用过 Spotlight ，一定用过或听说过大名鼎鼎的  Alfred 。启动器工具可以让他们快速打开  Mac  应用，而 Raycast 不仅仅只是一个启动器。</p><span id="more"></span><p>用了 Raycast 后，我默默把 Alfred 设置了开机不自动启动，也许很快就会卸载掉。</p><p>下面就介绍下 Raycast 的使用。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Raycast 的安装非常简单，官网下载即可。</p><p>官网地址：<a href="https://www.raycast.com/">https://www.raycast.com/</a></p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202127374.webp"></p><p>Raycast 的  Pro  版需要每月  8  美元，提供  AI  功能，如果需要将  AI  能力升级到  GPT-4 ，则需要每月 16  美元，不过对我来说，免费功能已经完全够用。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>默认 Raycast 随电脑启动，运行在后台，需要使用的时候按快捷键 <code>option + 空格</code> 就可以打开操作界面，<code>option + 空格</code> 是默认的设置，也可以通过设置修改为其他，界面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202127207.webp"></p><p>在输入框中输入关键字就能快速打开应用或文件。</p><h2 id="用户指南"><a href="#用户指南" class="headerlink" title="用户指南"></a>用户指南</h2><p>刚安装 Raycast，应用会置顶一个 Walkthrough 指令，也就是新用户指南。里面有介绍非常多的基础使用方法，甚至是用了很久可能都没有发现的小技巧。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202127509.webp"></p><p>按照这个里面的指引，可以快速学习 Raycast 的用法。当然不看这个指引，随着慢慢使用的深入，也能了解到所有功能，看个人选择了。</p><h2 id="指令类型"><a href="#指令类型" class="headerlink" title="指令类型"></a>指令类型</h2><p>Raycast 有命令、脚本、应用、快链四种类型的指令</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202127879.webp"></p><ul><li>命令：比如搜索文件、安装的扩展</li><li>脚本：暂未使用到</li><li>应用：Mac 中安装的应用 ，包括使用 Parallels 安装的应用</li><li>快链：可以设置网站链接、并可以添加参数实现直接 Google 搜索</li></ul><h2 id="搜索文件名"><a href="#搜索文件名" class="headerlink" title="搜索文件名"></a>搜索文件名</h2><p>Raycast 支持搜索文件，默认情况下会匹配文件名和文件内容，这样效果会比较差，可能会搜索出来大量的不需要的文件。</p><p>在设置中可以将搜索命令的配置修改为只按名称搜索：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202126951.webp"></p><p>在 Raycast 的操作界面出现时，按 <code>Command + ,</code> 可以打开设置界面。</p><h2 id="切换窗口"><a href="#切换窗口" class="headerlink" title="切换窗口"></a>切换窗口</h2><p>在 Mac 中可以三指向上滑来切换窗口，还是非常方便的，就是当活动窗口打开太多时，不太好找。在 Raycast 中使用 <code>Switch Windows</code> 命令也可以用来切换窗口：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202126509.webp"></p><p>选中 <code>Switch Windows</code> ，点击回车会列出所有活动的窗口，可以进行选择打开。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202126151.webp"></p><p>使用 Raycast 切换窗口有些时候还不如三指滑动便捷，但有两个好处：</p><ul><li>活动窗口多时会更方便</li><li>手指可以一直在键盘上</li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>可以在 Store 中进行扩展的安装。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202126319.webp"></p><p>在想要安装的扩展上点击右键就可以进行安装，现在 Store 的扩展程序非常丰富。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202126932.webp"></p><h2 id="词典"><a href="#词典" class="headerlink" title="词典"></a>词典</h2><p>Raycast 默认的 Define word 使用的是 Mac 默认的词典，并且只能查单词，在 Store 中可以有很多选择，比如：Google 翻译、Deepcast 等，我选择的是 Easy Dictionary 。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202126544.webp"></p><p>有多种翻译的对比，对于一些临时的翻译，不需要再单独打开一个翻译软件或者在浏览器中打开翻译网站。</p><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202126234.webp"></p><p>设置别名有两个好处：</p><ul><li>可以更快速的定位</li><li>没有设置别名，选择命令后，需要回车才能进入到具体功能，设置了别名，输入别名后，输入空格就能直接操作</li></ul><h2 id="剪切板历史"><a href="#剪切板历史" class="headerlink" title="剪切板历史"></a>剪切板历史</h2><p>这个功能是一个惊喜，在 Mac 中想要使用剪切板历史的功能需要使用单独的软件，如：Paste、PasteNow 等。</p><p>而 Raycast 内置了这个功能， 我设置了别名 p ，当我敲入 <code>p+空格</code> 就会进入到剪切板界面。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202126895.webp"></p><p>选择想要粘贴的记录，直接回车就可以粘贴到当前活动的 APP  中，也可以  <code>Command + k </code> 打开更多的操作，比如：复制、预览、保存等。</p><h2 id="Quicklinks"><a href="#Quicklinks" class="headerlink" title="Quicklinks"></a>Quicklinks</h2><p>Quicklinks 有两个用途：</p><ul><li>快速打开常用的站点</li><li>用于「指定某个搜索引擎搜索」或「指定在某个网站执行站内搜索」。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202126709.webp"></p><p>1、 设置了别名  g</p><p>2、设置 了快捷键  command + G</p><p>3、设置链接地址，{Query} 为占位符</p><p>4、选择默认浏览器</p><h2 id="集成-Logseq"><a href="#集成-Logseq" class="headerlink" title="集成 Logseq"></a>集成 Logseq</h2><p>我是  Logseq  的 重度使用者，Raycast 的  store  中有  Logseq  的扩展，安装后可以在 Logseq 中直接写文本插入到  Logseq  的日志中。</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202126454.webp"></p><p>输入  command +  空格后，内容就成功插入了：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202308202126394.webp"></p><p>除了添加日志外，还能直接搜索  Logseq  中的内容。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Raycast 是一款 Mac 上的启动器工具，功能类似于 Mac 自带的 「焦点（Spotlight）」。关于启动器工具，如果你没使用过 Spotlight ，一定用过或听说过大名鼎鼎的  Alfred 。启动器工具可以让他们快速打开  Mac  应用，而 Raycast 不仅仅只是一个启动器。&lt;/p&gt;</summary>
    
    
    
    <category term="成长" scheme="http://fwhyy.com/categories/%E6%88%90%E9%95%BF/"/>
    
    
    <category term="工具" scheme="http://fwhyy.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="分享" scheme="http://fwhyy.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>B 端软件：怎样进行竞品分析</title>
    <link href="http://fwhyy.com/2023/08/b-end-software-how-to-conduct-competitor-analysis/"/>
    <id>http://fwhyy.com/2023/08/b-end-software-how-to-conduct-competitor-analysis/</id>
    <published>2023-08-14T01:01:35.000Z</published>
    <updated>2023-08-15T07:03:19.861Z</updated>
    
    <content type="html"><![CDATA[<p>不管是从零开始做一款软件，还是在现有的软件中进行功能迭代，都少不了去找一些类似的软件和功能进行研究，这个就叫竞品分析。</p><p>竞品分析（Competitive Analysis）来源于商业和市场营销领域。指对目标客户群体中提供相似产品或服务的竞争对手的系统分析与研究。</p><p>作为一个 B 端产品经理，在日常工作中也经常会需要进行竞品分析。下面谈谈我对竞品分析的一些理解。</p><span id="more"></span><h2 id="竞品分析的目的"><a href="#竞品分析的目的" class="headerlink" title="竞品分析的目的"></a>竞品分析的目的</h2><p>1、如果你新进入一个行业，竞品分析可以让你快速地了解行业知识和相关的业务。</p><p>2、如果为了设计一个既强大又易用的功能而绞尽脑汁，那竞品分析可以为你打开思路。</p><p>3、多看看外面的世界，对设计产品时的思维方式、思考角度很有帮助，避免闭门造车。</p><h2 id="避坑"><a href="#避坑" class="headerlink" title="避坑"></a>避坑</h2><p>在做竞品分析之前，一定要先搞清楚两个点。</p><p>1、所设计的软件或产品的目标用户是谁？</p><p>2、针对目标用户，哪些是核心功能？哪些是辅助功能？</p><p>例如，同样是低代码产品，是偏技术人员使用还是偏业务人员使用，不同的侧重在功能设计时操作逻辑可能完全不同。</p><p>所以，在做竞品分析的时候，不能只是将功能原封不动地抄过来，否则最终会迭代成四不像。我们分析出来的结果只能作为决策的参考信息，而不应当成为决策的决定性依据。</p><h2 id="竞品的类型"><a href="#竞品的类型" class="headerlink" title="竞品的类型"></a>竞品的类型</h2><p>1、直接竞品：指的就是主要功能和核心用户群都基本相同的产品。 </p><p>研究直接竞品，可以直观地帮助我们看到自家产品与对方产品在功能、业务流程、用户体验上的直接区别，直观地看到自己在哪些点做的好，在哪些点做的不好。这种直观的对比，可以更清晰地进行功能的改进和规划，少走弯路。</p><p>2、间接竞品：间接竞品有两类：</p><ul><li><p>一类是用户群相同，主要功能不同</p></li><li><p>一类是主要功能类似，但用户群不同</p></li></ul><blockquote><p>例如：你做的低代码产品是面向头部客户、采用私有化部署的方式进行业务落地。那么像明道云、氚云等就属于功能类似，用户群不同。因为他们是  SaaS  模式，面向中小企业。</p><p>像泛微也是面向头部客户、也可以采用私有化部署，但他的业务主要还是  OA  相关，这种就属于用户相同，主要功能不相同。</p></blockquote><p>间接竞品能帮助我们获取一些框架外的参考或灵感，有助于打破常规，出圈突破。</p><h2 id="竞品分析关键点"><a href="#竞品分析关键点" class="headerlink" title="竞品分析关键点"></a>竞品分析关键点</h2><p>1、确定目标</p><ul><li><p>搞清楚做竞品分析的目的是什么?</p></li><li><p>是为了调整产品策略还是优化产品的用户体验?</p></li><li><p>是为了产品整体功能的横向拓展还是某个特定功能的纵向深入优化？</p></li><li><p>最后的分析报告是给谁用？UI  设计？产品经理？工程师？还是老板？</p></li></ul><p>就跟阅读一样，带着这些目的和问题，会更高效。只有想清楚了这些问题，在选择竞品、搜集资料、对比分析时才会有的放矢。</p><p>2、结合第一点中的问题和思考，按照上面归纳的竞品的类型，合理选择竞品。</p><p>3、对比分析</p><ul><li>结合不同的竞品，整理功能列表，颗粒度尽可能小</li><li>将功能重合度高的进行优先级排序</li><li>如果这些重合度高的功能在我们自己的产品中还没有，那就可以重点分析了</li></ul><h2 id="分析过程中的方式方法"><a href="#分析过程中的方式方法" class="headerlink" title="分析过程中的方式方法"></a>分析过程中的方式方法</h2><p>1、当我们去试用一个竞品时，可以先把主流程完整地走一遍，在这个过程中，结合目标问题，总结出总体架构，每个产品都有自己的一条核心主线，掌握这条主线就很容易顺藤摸瓜去了解全部。</p><p>2、发现和自己产品不太一样的功能或者操作体验时，去思考竞品中的设计能解决什么问题？可以切中什么样的场景？</p><p>3、如果推导出了场景，先将自己假想成一个小白用户，遇到这样的场景时，期望能有什么样的功能来满足需求。然后想想如果自己是这个产品的负责人、设计者，会用什么方案来解决？跟竞品的设计会有什么样的差异？</p><p>4、自己的产品在业务落地时，肯定会遇到各种各样客户个性化要求，面对这些客户问题，在竞品中有没有更好的解决方案？</p><p>5、当然在过程中，也可以采用自己熟悉的工具加以辅助，例如：SWOT 分析法、用户体验五要素分析法、PEST 模型等等。</p><h2 id="收集信息的渠道"><a href="#收集信息的渠道" class="headerlink" title="收集信息的渠道"></a>收集信息的渠道</h2><p>了解更多的信息渠道，可以更全方位地了解到竞品的公司情况、产品功能等。</p><p>1、能直接试用的，最好的方式就是注册账号去进行试用。</p><p>2、部分功能对免费用户不开放时，可以去查看帮助文档、视频教程。</p><p>3、找到竞品产品的公众号、视频号、微博、官网案例等，去翻阅历史信息，可以了解竞品的发展历程、功能选择的取舍。</p><p>4、通过一些专业咨询网站，可以从侧面了解到竞品的信息，还可以了解行业信息。例如：智研咨询、艾瑞咨询、36氪企服点评等。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>竞品分析是一件耗费精力的事情，也是一项需要有耐心的工作。需要通过科学的分析方法，为产品设计提供实用的参考价值，这些价值最后会体现为良好的用户体验、完整的功能闭环和更好的营收。</p><p>至于竞品分析的结果怎么呈现，我觉得不太重要，重要的是中间分析的过程和结论。至于结果怎么呈现，看报告写给谁用？再来决定是采用表格、图表、还是文档的形式。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;不管是从零开始做一款软件，还是在现有的软件中进行功能迭代，都少不了去找一些类似的软件和功能进行研究，这个就叫竞品分析。&lt;/p&gt;
&lt;p&gt;竞品分析（Competitive Analysis）来源于商业和市场营销领域。指对目标客户群体中提供相似产品或服务的竞争对手的系统分析与研究。&lt;/p&gt;
&lt;p&gt;作为一个 B 端产品经理，在日常工作中也经常会需要进行竞品分析。下面谈谈我对竞品分析的一些理解。&lt;/p&gt;</summary>
    
    
    
    <category term="产品" scheme="http://fwhyy.com/categories/%E4%BA%A7%E5%93%81/"/>
    
    
    <category term="B 端软件" scheme="http://fwhyy.com/tags/b-%E7%AB%AF%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="竞品分析" scheme="http://fwhyy.com/tags/%E7%AB%9E%E5%93%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>B 端软件：产品经理正确打开方式</title>
    <link href="http://fwhyy.com/2023/08/the-correct-opening-method-for-the-b-end-software-product-manager/"/>
    <id>http://fwhyy.com/2023/08/the-correct-opening-method-for-the-b-end-software-product-manager/</id>
    <published>2023-08-02T01:53:13.000Z</published>
    <updated>2023-08-15T06:58:26.124Z</updated>
    
    <content type="html"><![CDATA[<p>早些年 B 端软件流行瀑布式开发，以给客户提供解决方案为目的，没有成熟的产品，以定制化的方式进行交付，这里面有一个重要的岗位衔接着客户和开发，就是：需求分析师。</p><span id="more"></span><p>现在 B 端软件有很多的业务型产品软件、也有很多平台型产品软件，需求分析师变少了，产品经理变多了。</p><p>本文聊聊 B 端软件开发中的产品经理应该做些什么？</p><p>疫情前面试过不少产品经理，大部分提到 APP 、小程序的设计如数家珍，但涉及到 B 端软件就有点力不从心了，说明 B 端软件和 C 端有着很大的区别：</p><p>1、C 端软件服务于个人；B 端软件服务于企业、组织。</p><p>2、C  端软件更注重体验，希望简单易用，像微信，全国人民都在使用、抖音，三岁小孩都知道手指往上滑；B 端软件更注重效率，能给企业带来价值，降本增效。</p><p>3、C 端软件的使用角色相对单一，就是使用软件的个人；B 端软件有上层决策者、中层管理者、下层普通员工，会涉及到不同角色的工作台、权限、数据视图、操作流程等。</p><p>4、C 端软件要么花时间、要么花钱，尽管如此，每个人还是自愿花时间和金钱在上面；B 端软件能帮企业赚钱或省钱，但对普通员工来说，不一定是友好的，可能会改变工作习惯或增加工作量，需要自上而下，宣传、培训到最后熟练使用。</p><p>5、C 端软件通常凸显核心功能，其他辅助；B 端软件可能存在业务对使用人群有所偏重，但都很重要。</p><p>6、C 端软件使用简单，迁移成本低，导致有些笔记类软件担心用户流失，开放度小，限制导入导出数据；B 端软件从采购初期企业就有各种考虑，到最终上线使用，会经历一个相对长的时间、会涉及很多不同的业务部门，迁移成本高。所以很多战略项目即使不赚钱也要先把坑占着，后面才能做二期、三期。</p><p>正是因为有着很大的差别，所以在设计 B 端软件的时候，思考的方式、角度、侧重点都不一样，了解这些差别，能帮助产品经理更好地理解 B 端产品。</p><p>对 B 端产品经理来说，去设计一款 B 端软件，也是有章法可寻的，例如：拿开发具备低代码能力的  aPaaS  平台来说：</p><p>1、搞清楚开发的软件最终用户是业务人员还是技术人员？</p><p>2、搞清楚软件是私有化部署还是  SaaS  模式提供服务？还是需要同时支持两种？</p><p>3、了解  aPaaS  平台、低代码的概念、基本业务逻辑和实现原理，现在低代码已经烂大街了，资料非常地多。</p><p>4、做竞品分析，现在各种云产品都可以注册试用，即使有些付费功能不能用，也可以通过帮助文档了解功能详情和设计思路。做竞品分析的目的不是去抄功能，而是结合软件的最终目标，提升自己对业务的理解。</p><p>5、理清核心功能脉络，在企业级应用中，可以分四个部分：</p><ul><li>浏览器打开的界面中的各种交互和 UI 展现</li><li>审批流</li><li>业务流</li><li>集成扩展能力</li></ul><p>根据四个点可以去思考：</p><ul><li>界面的交互怎么样才能比较灵活？UI  风格怎样适应不同的行业？</li><li>审批中是自动流转还是手动选择下一节点和处理人？审批是独立挂载还是和数据模型集成在一起？</li><li>业务流的触发点有哪些？界面的交互和业务流怎么高效结合？</li><li>需要具备哪些扩展能力？</li></ul><p>6、上面提到了在 B 端软件中有高层、中层、底层不同的角色，不同的角色看到的工作台不一样、数据不一样、功能菜单、按钮不一样，需要设计既能满足业务又能操作简单的权限体系。</p><p>7、除了核心功能这条主线，还需要考虑一些辅助能力，比如：日志、监控、预警、配置等。</p><p>8、所有功能梳理完后，需要从中摘出一条最小可执行的单元，也就是  MVP，然后进行原型设计，包括：页面操作逻辑、交互规则。</p><p>9、拉着技术的前后端负责人，进行宣讲，听听意见，如果涉及到实现问题也能提前进行沟通。</p><p>10、方案确定后，配合 UI 进行高清图的设计，包括颜色、精细布局、字体、字号，整体效果出来后可以再进行一轮沟通和讨论。</p><p>上面是举例说明了产品经理做事的步骤，在实践这些步骤时，产品经理需要具备一些基本能力：</p><p>1、学习能力：从没接触过 B 端软件，到能熟练掌握概念、业务流程等需要有极强的学习和理解能力。</p><p>2、沟通能力：要能理解需求方的要求，也要和技术进行实现相关的沟通。</p><p>3、专业知识：如果是做垂直行业软件需要熟悉对应行业的业务、如果是通用性需要了解行业共性的知识、其他还包括专业工具的使用、软件开发流程等。</p><p>4、抽象思维：需求方在提需求时，往往会赠送一个解决方案，产品经理这时就不能照单全收，需要有自己的思考，挖出背后真实需求，并转化为软件中的一个功能。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;早些年 B 端软件流行瀑布式开发，以给客户提供解决方案为目的，没有成熟的产品，以定制化的方式进行交付，这里面有一个重要的岗位衔接着客户和开发，就是：需求分析师。&lt;/p&gt;</summary>
    
    
    
    <category term="产品" scheme="http://fwhyy.com/categories/%E4%BA%A7%E5%93%81/"/>
    
    
    <category term="B 端软件" scheme="http://fwhyy.com/tags/b-%E7%AB%AF%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="产品经理" scheme="http://fwhyy.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>怎样在  Github  中使用免密登录？</title>
    <link href="http://fwhyy.com/2023/07/how-to-use-password-free-login-in-github/"/>
    <id>http://fwhyy.com/2023/07/how-to-use-password-free-login-in-github/</id>
    <published>2023-07-23T01:49:05.000Z</published>
    <updated>2023-08-15T06:51:41.607Z</updated>
    
    <content type="html"><![CDATA[<p>我们在互联网上注册各种网站，密码经常会忘记，非常麻烦。以前还能各网站使用同一密码，虽然不太安全，但好记。现在各种网站的密码规则变强，还都不太一样，记密码就更难了。</p><p>如果有一种方式，能免密登录，就可以解决记不住密码的烦恼了。</p><span id="more"></span><h2 id="什么是免密登录？"><a href="#什么是免密登录？" class="headerlink" title="什么是免密登录？"></a>什么是免密登录？</h2><p>免密登录其实我们每天都在使用。</p><p>手机上按下指纹、或者刷个脸就能进入系统，类似这样的操作就是免密登录，只不过在  PC  使用浏览器访问网站时，大多都还是需要使用账号密码登录，为了安全性，可能还需要输入各种稀奇古怪的验证码。</p><p>现在有一种无需输入密码的解决方案：Passkey 。</p><h2 id="什么是-Passkey-？"><a href="#什么是-Passkey-？" class="headerlink" title="什么是 Passkey ？"></a>什么是 Passkey ？</h2><p>1、Passkey  不需要使用密码，而是使用密钥，接入了  Passkey 的网站会保存用户的公钥，登陆时用户使用私钥。</p><p>2、用户不需要知道私钥是什么，也不需要在登录时输入私钥，私钥通过「身份管理器」来提供。</p><p>2、「身份管理器」负责生成密钥，私钥自己保管，公钥提供给网站，「身份管理器」通常指指纹识别、人脸识别、或一些专用设备。</p><p>3、用户登录，网站会向「身份管理器」发请求，身份管理器验证身份（指纹、人脸识别）后允许使用私钥。</p><p>4、对用户来说就是按下指纹就登录网站了。</p><p>5、Passkey 的官网地址为：<a href="https://www.passkeys.io/">https://www.passkeys.io/</a> ，可以去进行体验。</p><h2 id="如何在-Github-中使用？"><a href="#如何在-Github-中使用？" class="headerlink" title="如何在  Github  中使用？"></a>如何在  Github  中使用？</h2><p>1、点击「头像」-&gt;「Feature preview」-&gt;「Passkeys」，将 Passkeys  功能开启，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202307221655666.webp"></p><p>2、点击「头像」-&gt;「Settings」，进行设置：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202307221655807.webp"></p><p>3、开启了  Passkeys  功能后，在「Password and authentication」设置中就可以看到  Passkeys  的设置，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202307221655985.webp"></p><p>4、点击「Add a passkey」后会出现  Github  的登录确认：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202307221655819.webp"></p><p>5、确认后点击「Add passkey」按钮：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202307221656679.webp"></p><p>6、因为我的使用场景是  Mac  上的  Chrome  浏览器，我选择的是「此设备」：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202307221655038.webp"></p><p>7、根据向导继续，会弹出指纹校验的界面，在电脑上进行指纹识别就可以了：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202307221655571.webp"></p><p>8、指纹识别成功后，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202307221655331.webp"></p><p>9、可以看到在  Passkeys  中成功加入了我的身份信息：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202307221655885.webp"></p><p>10、现在可以退出  Github  来试试新的登录方式了，点击使用  Passkey  方式，进行指纹识别就可以成功登录了：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202307221656776.webp"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>希望  Passkey  能被更多的网站接入，这样就可以解决记密码的烦恼了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们在互联网上注册各种网站，密码经常会忘记，非常麻烦。以前还能各网站使用同一密码，虽然不太安全，但好记。现在各种网站的密码规则变强，还都不太一样，记密码就更难了。&lt;/p&gt;
&lt;p&gt;如果有一种方式，能免密登录，就可以解决记不住密码的烦恼了。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="http://fwhyy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Github" scheme="http://fwhyy.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>读《快速阅读术》</title>
    <link href="http://fwhyy.com/2023/07/reading-fast-reading-techniques/"/>
    <id>http://fwhyy.com/2023/07/reading-fast-reading-techniques/</id>
    <published>2023-07-19T00:28:16.000Z</published>
    <updated>2023-07-19T00:29:01.263Z</updated>
    
    <content type="html"><![CDATA[<p>1、我读书很慢，和这本书的作者一样，但这本书的作者现在能一天读一本，甚至是两本，让人很羡慕，所以我看了这本书，想学习下快速阅读的技巧。</p><span id="more"></span><p>2、可能是书名的魔力，读这本书是我有史以来读的最快的一本书，一天之内就读完了，这么快读完一本书，有没有收获呢？下面就来说说。</p><p>3、读书不是要把所有的内容都记住。当然，我们也记不住，有时不在状态，看到后一页，就忘了前一页；有时放慢速度，仔细阅读，也未必能记住。所以我们的目的是要吸收各种「知识片段」，积少成多，汇小溪以成江海。</p><p>4、每天在统一时间进行阅读，让读书成为一种生活习惯，哪怕只读  10  分钟。这对每个人来说都应该不成问题，10  分钟怎么着也能挤出来。建议早睡早起，早上脑子比较清醒，我现在就是把这个统一的时间放在了早上。</p><p>5、不是所有的书籍都适合快速阅读，比如故事性强、技术类的就不适合快速阅读。个人感觉观点类、成长类的比较适合。需要先找对书，再采用快速阅读的方法。</p><p>6、拿到书后，仔细阅读序言和目录，可以先找自己感兴趣的章节进行阅读，避免每次都只看个开头，就像背四级单词一样。阅读目录，可以把握全书的整体框架和论述的推进过程。</p><p>7、可以同时阅读很多本书籍，硅谷天使投资人纳瓦尔·拉威康特说过：“读书应该看情绪。人们每天的想法都不固定，情绪状态也在不断波动，因此，不要与情绪对抗，根据当时的状态，选择不同的书。这样做也能帮你保持定期阅读的习惯。”</p><p>8、书中的内容不是每个字都需要阅读的，可以合理利用小标题进行跳读，跳读并不会影响到对整本书的理解。还有像作者自述、案例部分也能跳读，当我们对核心观点了解和理解后，可以再回过头来看这些例子来进行巩固。</p><p>9、读的越快，理解会越深，与其拖拖拉拉读 10 天，不如全神贯注读 60 分钟。这一点我深有体会，有时一本书放久了，再拿起来阅读，几乎要重现开始了。</p><p>10、读书就像呼吸一样，读书时有输入，也要有输出，最简单的「呼」就是摘抄，然后对摘抄的内容进行一句话评论，记录当时场景下的感想，便于日后回忆。以写来读，还可以明确阅读角度，区分重要和非重要部分。</p><p>11、带着目的去读，准备问题、确定好关键词，现在电子书阅读可以很方便进行全文检索，使用关键词进行搜索，前后上下文快速浏览，以寻找答案为目的。就像去一个荒岛探宝，肯定不会在岛上每一片土地都去寻找，一定是根据线索，采用最便捷的方式。</p><p>12、本文就属于可以快速阅读的范畴，每一条都是独立的，之间没有很深的关联；不需要按照顺序，跳着看、挑着看、倒着看都可以。</p><p>13、有时「读书慢」这个标签会束缚我们，只要摘去这无意之中贴在自己身上的标签，就会发现一个能够随心所欲阅读的自己。也不用担心是否吸收、是否记住，因为读书这个过程以及看过的内容，会自然变成养分，滋养着我们。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、我读书很慢，和这本书的作者一样，但这本书的作者现在能一天读一本，甚至是两本，让人很羡慕，所以我看了这本书，想学习下快速阅读的技巧。&lt;/p&gt;</summary>
    
    
    
    <category term="读书" scheme="http://fwhyy.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
    <category term="读书笔记" scheme="http://fwhyy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="读书" scheme="http://fwhyy.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>B 端软件：信创、国产化知识梳理</title>
    <link href="http://fwhyy.com/2023/07/b-end-software-sorting-out-knowledge-on-innovation-and-localization/"/>
    <id>http://fwhyy.com/2023/07/b-end-software-sorting-out-knowledge-on-innovation-and-localization/</id>
    <published>2023-07-11T02:05:09.000Z</published>
    <updated>2023-07-12T02:07:41.216Z</updated>
    
    <content type="html"><![CDATA[<p>现在，做  ToB  软件，不管是跟客户沟通、内部会议、还是网上的资讯，经常会看到安可、信创、国产化这样的字眼。</p><span id="more"></span><p>下面通过模拟一些问题，来梳理国产化相关的知识。</p><p>1、什么是安可？</p><p>安可是「安全可靠」的简称。2019 年，我国启动了「安全可靠工程」，旨在加强信息和网络安全领域的能力。通过安全可靠工程，我国证明了具有安全可靠的关键系统、关键应用和关键软硬件产品的研发和集成能力，初步实现了对国外信息技术产品的全方位替代。</p><p>2、什么是信创？</p><p>信创是「信息技术应用创新产业」的简称，主要包括基础设施、基础软件、应用软件和信息安全等四大领域。</p><p>可以把信创理解为安可的升级版本。</p><p>2020 年央行成立金融信创生态实验室，第一批「金融信创解决方案」出现，被公认为信创产业的应用实践元年。</p><p>3、什么是  2+8+N  体系？</p><p>2020  年，我国提出了「2+8+N」的安全可控体系，其中：</p><ul><li>2：党、政府</li><li>8：金融、交通、电信、教育、电力、航空航天、石油和医疗八个行业</li><li>N：其他行业，例如：汽车、地产、物流等</li></ul><p>党和政府部门先行，随后逐步在涉及国计民生的 8 大行业实现安全可靠、自主可控，保障国家信息安全的工作全面展开，最后是其他行业。</p><p>4、为什么要发展信创产业？</p><p>通过自主研发和推广自主化、国产化的技术标准，从信息安全角度出发，达到自主可控，解决核心技术「卡脖子」的问题，不受制于外国技术的制约。</p><p>俄乌战争后，微软、西门子、甲骨文、SAP、Autodesk、ABB、GENESYS、 Red Hat、GitHub、Docker 等基础软件、开源社区、核心工业软件厂商相继停止俄罗斯境内服务，值得我们警醒。</p><p>所以，安可和信创对于提升我国IT产业核心竞争力、促进数字经济发展以及构建新基建都有着重要的价值。</p><p>5、信创产品有哪些发展阶段？</p><p>新创产业现在已经进入到了「规模化推广期」，从发展到现在可以分为四个阶段：</p><ul><li>萌芽期（1999-2005）：1999 年时任科技部部长徐冠华指出中国信息产业缺芯少魂（指的是芯片和操作系统），Xteam、蓝点、中科红旗、银河麒麟、中软 Linux 等公司陆续成立，产业进入萌芽期。</li><li>起步期（2006-2013）：2006 年，「核高基」政策推出，明确核心电子器件、高端通用芯片及基础软件产品方向，标志着信创产业的起步。</li><li>试点期（2014-2017）：2014 年中央网络安全与信息化领导小组成立，研究制定网络安全和信息化发展战略、宏观规划和重大政策，推动国家网络安全和信息化法治建设，不断增强安全保障能力。2016年《十三五国家信息化规划》出台，各地开始部署现代信息技术产业生态体系，信<br>创试点工作进入实质性阶段。</li><li>推广期（2018- 至今）：2018年-2019年，中兴/华为被美国制裁，美国开始加大对中国进出口限制，我国加速推进自主研发应用试点并扩大范围，信创产业招投标大幅增加，信创产业从「试点实践」进入「规模化推广阶段」。</li></ul><p>6、信创产业的范畴有哪些？</p><p>信创产业主要涉及基础硬件、基础软件、应用软件、信息安全四大板块。从软件关注的纬度来看，涉及：</p><ul><li>芯片：鲲鹏（ARM）、海光（x86）、龙芯（MIPS）、兆芯（x86）、飞腾（ARM）、申威（Alpha）等</li><li>操作系统：中标麒麟、银河麒麟、统信UOS、华为欧拉、中兴新支点、中科红旗等</li><li>数据库：达梦、易鲸捷、腾讯 TDSQL、华为 GaussDB、中兴通讯 GoldenDB、人大金仓KingBase 等</li><li>中间件：东方通、普元中间件、金蝶天燕、宝兰德中间件等</li><li>云服务：阿里云、华为云、QingCloud、DaoCloud  等</li></ul><p>7、.NET 符合信创要求吗？</p><p>很多人一听到 .NET 就会想到微软，一想到微软就会说能跨平台吗？能部署到  Liunx  吗？这种思想还停留在  10  几年前。</p><p>下面简单说下 .NET 的历程就可以清晰地知道现在的 .NET 并不是以前的 .NET Framework 。</p><ul><li>2002 年 2 月 23 日最早的 .NET Framework 1.0 发布</li><li>.NET Framework 的最后一个版本为 .NET Framework 4.8.1</li><li>2014  年  3  月，.NET 基金会成立</li><li>2016  年 6  月，.NET Core 1.0 项目正式发布，拥抱开源，实现跨平台，.NET Core 最新的为 .NET Core 3.1</li><li>2020  年  11  月，.NET 5 发布，实现了大融合，是一个重要的转折</li><li>2021  年  11  月，.NET 6 发布，LTS  版本，截止到  2024  年  11 月</li><li>2022  年  11  月，.NET 7 发布</li><li>目前 .NET 8  的预览版已经发布，预计今年 11  月发布正式版</li></ul><p>所以现在说 .NET 是指 .NET Core 和 .NET 5之后的版本，这些版本有下面一些特点，完全符合信创要求：</p><ul><li>采用最开放的 MIT 的开源协议</li><li>归属于中立的第三方组织 .NET 基金会掌控，不属于任何商业公司，除了微软，还有其他很多大公司，如  Google、AWS、三星 等都在里面</li><li>完美支持  x86 、ARM</li></ul><p>8、全部国产化才能项目落地吗？</p><p>未来肯定是这样的。</p><p>但以我的经验来看，目前重点还是芯片、操作系统、数据库，只要是涉及到信创，进行国产化部署，这三大件是一定需要使用国产化的，数据库大概率是达梦。</p><p>中间件，不同的企业有不同的要求，有的使用东方通、有的使用普元、有的强制要求必须适配、有的还能允许暂时使用开源中间件，如：redis、mongodb 等。</p><p>所以，做国产化适配，也可以分步骤：</p><ul><li>先进行程序的适配，能在不同的 CPU 架构中编译、运行</li><li>再进行数据库适配，可以优先支持达梦</li><li>最后进行中间件适配</li></ul><p>9、信创产业的未来规划是什么？</p><p>2022 年 9 月底，国资委下发了重要的国资发 79 号文件，全面指导并要求国央企落实信息化系统的信创国产化改造。其中，明确要求所有中央企业在 2022 年 11 月底前将安可替代总体方案报送国资委。</p><p>自 2023 年 1 月起，每季度末向国资委报送信创系统替换进度。最终要求 2027 年底前，实现所有中央企业的信息化系统安可信创替代。</p><ul><li><p>2022 年 11 月底，完成信创改造方案规划并报送国资委</p></li><li><p>2023 年 1 月起，每季度报送信息化系统信创改造的最新进度</p></li><li><p>2027 年底，全部国央企必须完成信息化系统的信创改造工作</p></li></ul><p>10、信创产业的发展趋势是什么？</p><p>目前我国信创产业的发展主要由政策主导，各省政府通过财政补贴促进供给端快速发展。</p><p>但随着 B 端和 C 端对国产安全的需求逐渐释放，信创发展的驱动力也将从政策主导转为需求主导。同时，随着信创渗透率进一步提高，信创产品也越来越接近 C 端消费者，生态圈进一步完善。</p><p>未来三年，随着信创产品市场化程度进一步推进，信创产业尤其是党政信创将迎来常态化发展，为下游区域经销商和服务商带来新机会。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;现在，做  ToB  软件，不管是跟客户沟通、内部会议、还是网上的资讯，经常会看到安可、信创、国产化这样的字眼。&lt;/p&gt;</summary>
    
    
    
    <category term="产品" scheme="http://fwhyy.com/categories/%E4%BA%A7%E5%93%81/"/>
    
    
    <category term="国产化" scheme="http://fwhyy.com/tags/%E5%9B%BD%E4%BA%A7%E5%8C%96/"/>
    
    <category term="B 端软件" scheme="http://fwhyy.com/tags/b-%E7%AB%AF%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="信创" scheme="http://fwhyy.com/tags/%E4%BF%A1%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>B 端软件：常见知识梳理</title>
    <link href="http://fwhyy.com/2023/07/b-end-software-common-knowledge-sorting/"/>
    <id>http://fwhyy.com/2023/07/b-end-software-common-knowledge-sorting/</id>
    <published>2023-07-05T09:49:40.000Z</published>
    <updated>2023-07-05T09:50:48.492Z</updated>
    
    <content type="html"><![CDATA[<p>我一直从事企业级软件研发工作，也就是我们通常称之为 B 端软件。近年来，我的工作重心主要在研发低代码平台和 aPaaS 平台，这使我对 B 端软件有了更深入的理解。</p><span id="more"></span><p>和 B 端软件对应的就是我们熟悉的 C 端软件，我们手机中安装的那些  APP  就属于此类。那么，他们之间的主要区别是什么呢？</p><p>最初始的印象是  B  端面向企业，而 C  端则面向个人。</p><p>最近我看到一个有趣的结论：</p><ul><li>C 端主要解决终端消费者的问题，需要耗费时间和金钱。例如抖音、淘宝、京东等应用程序。</li><li>B 端主要致力于赚钱和增加价值，解决组织的增值需求，即所谓的 「降本增效」。例如 OA 可以提高办公效率，低代码平台则可以提高软件交付效率。</li></ul><p>当然这种解释并不完全准确，因为 C 端也有很多学习类和效率提升类的软件。但是这样的解释可以帮助我们更快地理解它们之间的不同。</p><p>在接触 B 端软件慢慢深入后，发现有很多的维度和角度去看待  B  端软件。</p><h2 id="服务模式"><a href="#服务模式" class="headerlink" title="服务模式"></a>服务模式</h2><p>1、SaaS（Software as a Service）：软件即服务。SaaS 是一种让用户通过网络访问软件的模式。在这种模式下，软件被部署在云端，用户无需安装就可以使用。SaaS 提供商负责软件的维护和更新。</p><p>2、PaaS（Platform as a Service）：平台即服务。PaaS 提供了一个云端平台，让开发者可以在这个平台上开发、运行和管理应用程序。开发者无须关心底层基础设施，可以专注于应用开发。</p><p>3、IaaS（Infrastructure as a Service）：基础设施即服务。IaaS 提供了虚拟化的计算、存储和网络资源。用户可以按需购买资源，而无须投资购买硬件设备。IaaS 提供商负责基础设施的管理和维护。例如：阿里云的  OSS  服务。</p><p>关于这三者，曾经在播客中听一个大佬是这么类比的：</p><blockquote><p>SaaS ：凡是给一个账号和密码的，就可以认为是一个  SaaS  服务，就像住酒店，选择房型和时长，支付相应的费用，我们是客户，酒店提供  SaaS  服务。</p><p>PaaS：你盖一栋楼，按照酒店的规格装修好，租给他人去经营管理，你就是提供  PaaS  服务。</p><p>IaaS：你搞定水电缴费、蔬菜生鲜的供货、床单被套送洗，这就是在为酒店提供  IaaS  服务。</p></blockquote><p>除此之外，还有一种模式叫 aPaaS（Application Platform as a Service）：应用平台即服务。aPaaS 是 PaaS 的一种特殊形式，它提供了一个集成的开发、运行和管理应用程序的环境。用户可以在 aPaaS 平台上快速构建、部署和扩展应用程序。Gartner 对其所下的定义是：</p><blockquote><p>这是基于PaaS（平台即服务）的一种解决方案，支持应用程序在云端的开发、部署和运行，提供软件开发中的基础工具给用户，包括数据对象、权限管理、用户界面等。</p></blockquote><p>要确定一家平台是不是 aPaaS，只需要看该平台是否拥有开发应用系统的能力，能不能快速开发出一套软件系统。</p><h2 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h2><p>1、个性化：记得早期做企业项目，全个性化定制，使用传统的瀑布模式开发：</p><ul><li>需求分析和客户的业务方沟通完需求，整理成需求文档；</li><li>进行高保正  UI  图的设计和技术层面的设计，找客户确认；</li><li>确认后进行开发、测试上线；</li><li>进入后期运维阶段。</li></ul><p>个性化定制的产品大多都是解决客户特定场景问题，无法进行复用，每一个新的客户进行项目落地，又需要重头开始，导致成本高、收益低。</p><p>2、垂直化：想要让边际成本比较低，就需要从个性中找共性，所以就出现了泛微、蓝凌、致远的  OA  办公软件；金蝶、用友的财务、人力资源软件；明源的房地产软件等。</p><p>垂直化的商业软件对于中小公司可以开箱即用，对于大型企业客户来说也需要一定的个性化定制和改造才能上线使用。这里的定制和第一阶段的个性化定制就是两个层面的东西了。</p><p>3、多样化：随着  B  端软件越来越成熟，企业信息化建设越来越完善，B  端软件越来越丰富和多样，从只支持  PC  端访问到支持多终端使用；从支持单机部署到分布式、容器化、SaaS 模式；从解决某一个特定场景问题到多领域发展，例如：泛微现在不单单只是一个  OA  系统了。</p><p>4、集成化：功能虽然在不断增强和扩展，但不可能把所有事情都做了，需要的是将擅长的事情发挥到极致。要完成更大的业务目标就需要进行集成和连接，只要涉及到这些方面：</p><ul><li>获取第三方系统的数据进行展示。</li><li>业务上有需要和第三方系统进行数据传递和交互。</li><li>特定的功能需要对接专有软件或服务，例如：电子签章、Office  文档编辑、查询企业信息、地图显示等。</li></ul><p>现在的一些  aPaaS  平台基本都具备各种集成的能力。</p><p>5、平台化：制定标准和规范，让更多的  ISV（独立软件开发商）能在平台上进行软件开发，或者让一些软件厂商能将自己产品和平台进行适配，当入驻的软件越多，平台的能力就越强，最终打造一个软件的生态。例如钉钉和企业微信的应用中心。</p><h2 id="运维角度"><a href="#运维角度" class="headerlink" title="运维角度"></a>运维角度</h2><p>从运维部署的角度来看，B  端软件可以分为公有云、私有云、混合云三种方式。</p><p>1、公有云：公有云是指第三方服务提供商（如 AWS、阿里云、华为云等）提供的云计算资源和服务。在这种情况下，企业不需要购买和维护自己的硬件和基础设施，而是根据使用情况付费。公有云的优点包括快速部署、按需付费和弹性扩展。</p><p>2、私有云：私有云是指企业内部建立和维护的云计算环境。企业可以在自己的数据中心内部署私有云，或者托管在第三方数据中心。私有云的优点包括更高的安全性、更好的性能和更强的定制能力。</p><p>3、混合云：混合云是公有云和私有云的结合，企业可以根据业务需求和安全性要求灵活地在两者之间切换。这种部署方式兼具公有云的灵活性和私有云的安全性，使企业能够将敏感数据放在私有云中，而将其他可扩展的工作负载放在公有云中。</p><p>现在，国产化是一种趋势，符合信创要求也属于常规操作了，所以产品除了能在不同的云进行部署外，还需要能适配各类国产服务器、数据库、中间件。</p><h2 id="业务划分"><a href="#业务划分" class="headerlink" title="业务划分"></a>业务划分</h2><p>如果你刚刚接触  B  端软件，在各种会议沟通中，可能经常会听到一些业务名词，比如  OA、ERP  等，下面列举些常见的业务系统：</p><p>1、OA （ Office Automation）：办公自动化。它是指通过计算机技术和通讯技术来提高办公效率，实现办公信息化、网络化、智能化的一系列技术和管理手段。常见功能有：即时通讯、日程安排、文档管理、协同办公、流程管理、知识管理、任务管理等。例如：泛微、蓝凌、致远。</p><p>2、ERP（Enterprise Resource Planning）：企业资源规划。ERP 系统是一种集成的管理信息系统，它可以帮助企业管理生产、采购、销售、财务等业务流程。例如：SAP。</p><p>3、CRM（Customer Relationship Management）：客户关系管理。CRM 系统用于管理企业与客户之间的关系，包括客户信息管理、销售线索、线索跟进、市场营销等功能。例如：纷享销客、销售易。</p><p>4、MES（Manufacturing Execution System）：制造执行系统。MES系统主要用于生产过程的实时监控和调度，以提高生产效率和产品质量。</p><p>5、WMS （Warehouse Management System）：仓库管理系统。WMS系统是一种用于管理仓库物流和库存的软件系统，包括入库、出库、库存管理、库存盘点等方面的管理。</p><p>6、SRM（Supplier Relationship Management）：供应商关系管理。SRM系统帮助企业管理与供应商的关系，包括供应商信息管理、采购管理、供应链协同等功能。例如：企企通。</p><p>7、HCM（Human Capital Management）：人力资本管理。HCM系统用于管理企业的人力资源，包括招聘、培训、绩效评估等功能。</p><p>8、SCM（Supply Chain Management）：供应链管理。SCM系统用于管理企业的供应链活动，包括物流、库存管理、需求预测等功能。</p><p>9、PLM（Product Lifecycle Management）：产品生命周期管理。PLM系统用于管理产品从设计到退役的整个生命周期，包括产品设计、生产、维护等环节。</p><p>10、EAM（Enterprise Asset Management）：企业资产管理。EAM系统用于管理企业的固定资产，包括资产登记、维护、报废等功能。</p><p>11、BI（Business Intelligence）：商业智能。BI系统用于收集、分析和呈现企业数据，帮助企业进行决策支持和战略规划。例如：帆软、思迈特、海致等。</p><p>12、BPM（Business Process Management）：业务流程管理。BPM 系统用于对企业的业务流程进行管理和优化，以提高企业的运营效率和灵活性。</p><p>13、DMS（Document Management System）：文档管理系统。DMS 系统用于管理企业的电子文档，包括文档存储、检索、版本控制等功能。</p><p>14、MDM（Master Data Management）：主数据管理。MDM 系统用于管理企业的主数据，如客户、产品、供应商、物料等核心数据，确保数据的准确性和一致性。</p><p>15、ITSM（IT Service Management）：IT服务管理。ITSM 系统用于管理企业的IT服务，包括服务台、事件管理、配置管理等功能。</p><p>16、电子签约：电子签约系统是一种基于互联网技术的合同签署方式，它通过数字化、网络化的方式，使得双方可以在不同的地点、不同的时间完成合同签署，从而提高合同签署的效率和便捷性。例如：E 签宝、金格、法大大、契约锁等。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我一直从事企业级软件研发工作，也就是我们通常称之为 B 端软件。近年来，我的工作重心主要在研发低代码平台和 aPaaS 平台，这使我对 B 端软件有了更深入的理解。&lt;/p&gt;</summary>
    
    
    
    <category term="产品" scheme="http://fwhyy.com/categories/%E4%BA%A7%E5%93%81/"/>
    
    
    <category term="B 端软件" scheme="http://fwhyy.com/tags/b-%E7%AB%AF%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Logseq：使用一年的感受</title>
    <link href="http://fwhyy.com/2023/06/the-feeling-of-using-logseq-for-a-year/"/>
    <id>http://fwhyy.com/2023/06/the-feeling-of-using-logseq-for-a-year/</id>
    <published>2023-06-27T02:45:05.000Z</published>
    <updated>2023-06-28T02:46:14.879Z</updated>
    
    <content type="html"><![CDATA[<p>去年  6  月  20 号写了一篇《Obsidian 初体验》，也就是从那时起，开始使用  Obsidian，随后不久，知道了  Logseq  这款软件，就同时使用 Obsidian 和 Logseq 。</p><span id="more"></span><p>如今，一年过去了，更早使用的 Obsidian 现在打开次数越来越少，而 Logseq 已经成为日常重度使用的工具之一。</p><h2 id="为什么喜欢-Logseq"><a href="#为什么喜欢-Logseq" class="headerlink" title="为什么喜欢 Logseq"></a>为什么喜欢 Logseq</h2><h3 id="丝滑的日志功能"><a href="#丝滑的日志功能" class="headerlink" title="丝滑的日志功能"></a>丝滑的日志功能</h3><p>最开始使用  Logseq  是因为日志功能，每天一打开  Logseq，就会自动有一个当前日期的页面（一个  md  文件），也就是说打开就能输入。</p><p>Obsidian  也有日志功能，但需要在左边的工具条中点击「打开/创建今天的日记」进行创建，就这么一个细小的区别，让我对  Logseq  的使用率大大提升。</p><p>另外，虽然日志是每天一个页面，但在  Logseq  中，日志功能模块是将所有日期的日志串起来，鼠标滚动就可以进行查看，这也比  Obsidian  要方便很多。</p><h3 id="丰富的展示"><a href="#丰富的展示" class="headerlink" title="丰富的展示"></a>丰富的展示</h3><p>在  Logseq  中，我们可以使用  Markdown  语法，比如标题、加粗、斜体、链接、图片、代码、数学公式等。</p><p>但  Logseq  也有自己个性化的展现：</p><p>1、整体为大纲模式，就是一个<strong>无序列表</strong>，类似幕布、workflowy。这种模式特别适合记录日常琐碎的事项。</p><p>2、使用  NOW、TODO、SCHEDULED、Linked References  等会在页面中产生独立的展现样式。</p><p>而在  Obsidian  中是严格遵循  Markdown  语法，更适合长文编辑和预览。</p><h3 id="颗粒度更小"><a href="#颗粒度更小" class="headerlink" title="颗粒度更小"></a>颗粒度更小</h3><p>在  Obsidian  中页面是最小单位，双链也是在页面和页面之间进行链接。Logseq  是大纲模式（无序列表），列表的每一项就是一个块，块可以被单独引用：</p><ul><li>右键列表项前面的小圆点，选择「复制块引用」，然后粘贴到想要引用的地方即可，这种引用方式只会显示第一行，鼠标放到引用上面可以预览内容，点击可以跳转到对应的块里。</li><li>右键列表项前面的小圆点，选择「复制内嵌块」，然后粘贴到想要引用的地方即可，相比于引用，能看到整个块的内容。修改引用位置的块，原来的块也会同步修改。</li><li>块中可以使用 [[]] 进行页面的引用，在页面中也可以引用块。</li><li>被引用的块所在行的后面会有引用次数的显示，点击数字，直接在下方按照时间顺序展示引用的内容。</li></ul><h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><p>和  Obsidian  一样 ，Logseq  也是采用本地存储的方式。是否支持笔记存储现在已经成为了我选择笔记工具的首要条件了。</p><p>本地存储文件，非常有安全感，我现在是  iCloud  和  GitHub  双备份，iCloud  还可以实现移动端和  PC  端的同步。</p><h2 id="后续新发现"><a href="#后续新发现" class="headerlink" title="后续新发现"></a>后续新发现</h2><p>就因为一个日志的功能，我就从  Obsidian  迁移到了  Logseq 。随着慢慢深入地使用，又发现：</p><p>1、双链后，Logseq  会在页面的  Linked References 中直接展示内容，而 Obsidian 需要在右侧栏中进行查看。</p><p>2、在  Logseq 中，标签也是一个页面，点击某个标签会进入到这个标签对应的页面，在该页面中以时间顺序展现所有打过此标签的内容，而  Obsidian  中的  tag  只是一种搜索方式，结果以标题列表的形式展现，如果要看内容，还需要对标题进行逐个点击。</p><p>3、通过魔法棒 / 可以呼出 TODO、DOING、LATER、NOW、Deadline、Scheduled  等功能，再结合 logseq-plugin-agenda  插件，可以实现一个功能还不错的日程管理工具。</p><p>4、可以在  Logseq  中阅读  PDF  文件，左边是  PDF  内容，右边记录笔记，非常方便。</p><p>5、支持  query  语法，可以将 TODO、DOING、DONE  这些不同类型的数据在一个页面中进行分类汇总。</p><p>6、我是 readwise reader  的付费用户，readwise 可以实现和  Obsidian 、Logseq  的同步，起初配置了  Obsidian ，会同步到一个单独的  Readwise  目录中，不过这个目录几乎没有打开过。后来尝试了下  Logseq ，发现 readwise  中新增的内容会同步到当天的日志，显示在 Linked References 中，非常方便进行二次加工和处理，简直是惊喜。</p><h2 id="备受争议的文件夹"><a href="#备受争议的文件夹" class="headerlink" title="备受争议的文件夹"></a>备受争议的文件夹</h2><p>我们使用的很多笔记软件：语雀、Obsidian、印象笔记等都是支持文件夹的，似乎使用文件夹来组织内容已经成为了一种习惯，但在  Logseq  中没有文件夹，这让很多使用者不太适应，在  Logseq  的论坛中经常有人发帖强烈要求添加文件夹功能。</p><p>而我，选择  Logseq，其中一个原因就是不支持文件夹。</p><p>我的理由是：</p><p>1、目前  tag 、目录、搜索配合使用，已经完全可以满足分类管理的需求。</p><p>2、文件夹体系中，页面是最小的单位，而  Logseq  中块是最小单位。</p><p>3、文件夹会改变我们的思维方式，有文件夹，会先考虑写的内容放到那个文件夹，这个考虑会变成一种阻碍。</p><p>4、从产品架构设计层面来说，增加文件夹，可能会修改产品的存储数据的方式和检索方式，可能我最看重的本地存储就会消失了。思源笔记在  1.2  版本后就将  md  格式修改为了特定的数据格式，也因此丢失了一部分用户。</p><h2 id="使用到的插件"><a href="#使用到的插件" class="headerlink" title="使用到的插件"></a>使用到的插件</h2><p>1、Agenda：UI  美观、功能强大的日程管理工具。</p><p>2、Heatmap：热力图显示，跟  Github 类似。</p><p>3、Bullet Threading：大纲结构的数据存在父子级关系，用线连接块的父子级，让结构更加鲜明。</p><p>4、Tabs：方便打开多页面时的切换。</p><p>5、Tags：可以根据  Tag  名称进行搜索。</p><p>6、Logseq Markmap：可以根据页面和块生成思维导图，并可以保存为图片。</p><h2 id="对知识管理的思考"><a href="#对知识管理的思考" class="headerlink" title="对知识管理的思考"></a>对知识管理的思考</h2><p>知识管理大体上可以分收集、处理、输出三步。信息收集有很多种方式，上面提到的  readwrise reader  就是其中一种。readwise  可以很好的和  Logseq  进行同步。</p><p>中间的处理完全可以在  Logseq  中完成，处理数据的来源之一就是  readwise 。</p><p>输出就比较简单了，使用 Obsidian 、Typora 都可以。</p><p>最近在看知识管理理论 PARA ，正在尝试在  Logseq  中进行实践，后面单独开篇来写。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文是一些使用的体验和想法，没有截图，更适合使用过  Logseq 这款工具的同学阅读。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;去年  6  月  20 号写了一篇《Obsidian 初体验》，也就是从那时起，开始使用  Obsidian，随后不久，知道了  Logseq  这款软件，就同时使用 Obsidian 和 Logseq 。&lt;/p&gt;</summary>
    
    
    
    <category term="成长" scheme="http://fwhyy.com/categories/%E6%88%90%E9%95%BF/"/>
    
    
    <category term="效率" scheme="http://fwhyy.com/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="工具" scheme="http://fwhyy.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Logseq" scheme="http://fwhyy.com/tags/logseq/"/>
    
  </entry>
  
  <entry>
    <title>内驱力</title>
    <link href="http://fwhyy.com/2023/06/talk-about-drive/"/>
    <id>http://fwhyy.com/2023/06/talk-about-drive/</id>
    <published>2023-06-19T01:25:55.000Z</published>
    <updated>2023-06-19T06:27:20.082Z</updated>
    
    <content type="html"><![CDATA[<p>最近在群里看到周筠老师征集小孩教育相关的问题，我第一个想到的问题就是：如何让孩子变得有内驱力？</p><span id="more"></span><p>不光是小孩教育，个人成长、团队管理都存在内驱力的问题。</p><p>内驱力是什么?</p><p>内驱力是指我们做某件事是因为这件事情本身，从个人内在的、自我发起的动力，而不是因为外部的奖惩。例如：</p><ul><li>周末约朋友一起去打球，是因为喜欢打球本身，这是内驱力在起作用；</li><li>员工因为怕扣  KPI  而加班干活，这是外驱力所带来的结果。</li></ul><p>下面谈谈对小孩教育、个人成长和团队管理的自驱力的一些思考。</p><h2 id="小孩教育"><a href="#小孩教育" class="headerlink" title="小孩教育"></a>小孩教育</h2><p>记得我小时候，经常听到家长在耳边说：“要转变思想，将要我学变成我要学”，当时理解不了，还是该玩玩，该闹闹。现在就变成了我对女儿说这些话了，同样，女儿也理解不了。</p><p>小学阶段课程少、内容相对简单，家长只要有监督，耐心对作业进行辅导，小孩成绩不会很差，但如果没能养成一个好的学习习惯，到初中、高中就会被拉下。</p><p>之前看到过一个  UP  主讲，小学六年就是用来培养孩子的学习习惯，不用太在意考试的分数。我觉得很有道理，这里的学习习惯就是有自主学习的意识和好的学习方法。</p><p>我们希望和孩子之间平等地沟通、交流，但我们和孩子的经历、认知是存在很大差异的，我们认为很简单的道理和正确的行动指南，孩子不会去践行，甚至会反抗。</p><p>奖励和惩罚应该是我们常用的手段，例如：女儿的画画班有暑期的北京游学活动，女儿非常想去，我们可以用这个作为她期末考试结果的奖励，可能为了得到这个奖励，女儿会很认真对待学习一阵子，但如果某一天，她不想去北京了，学习的兴致也会没了。</p><p>李松蔚在得到的《心理学通识》课程中提到：</p><blockquote><p>1、奖励有可能弱化一个人的内部动机。</p><p>2、并不是说不能奖励，但要在动机上强调内驱，在物质上给予回报。</p><p>3、给一个行为设置适度的障碍，反而更有助于发挥自己的内驱力。</p></blockquote><p>有意识的让孩子多运动、多阅读，对养成好的学习习惯也会有正向的促进作用，有一本书就叫《培养孩子从跑步开始》，最近准备看看。</p><p>现在培养女儿仍然在不断摸索和实践中，但没那么焦虑了，离小学毕业还有 3 年，三年养成一个习惯时间上来说，应该足够了。</p><h2 id="个人成长"><a href="#个人成长" class="headerlink" title="个人成长"></a>个人成长</h2><p>在同事眼中，我算是一个比较自律的人，能坚持早起、坚持跑步、虽然文笔不好，也能坚持输出点文字。</p><p>这些都是因为内驱力导致的吗？也不尽然。很多时候也会使用奖励、倒逼等各种方法。</p><p>拿跑步来说，很长一段时间，我享受跑完后大汗淋漓的畅快，但跑步的过程没有觉得很愉悦，最后分析原因，可能是过于追求配速，导致大量出汗的同时也非常累。</p><p>今年  5  月后，气温逐渐升高，我改变了跑步的方法，只管心率，不管配速，将心率控制在了  140  左右，有时碰到 30  多度的气温，天气闷热，也跑得很舒服。就这一个小小的改变，这个夏天的跑量我不担心了。</p><p>最近在看一本书：《行为设计学：零成本改变》，书中最后一个部分介绍通过营造路径来进行改变。我跑步将关注配速调整为关注心率，其实就是营造了一条新的路径，让跑步变得愉悦了，有想去跑的冲动了。</p><h2 id="团队管理"><a href="#团队管理" class="headerlink" title="团队管理"></a>团队管理</h2><p>德鲁克说过：“管理是最大程度地激发他人的善意”。这个善意是指激发员工的成长性思维，提升每个人的内驱力，让每个人看问题能更长远，而不是只顾眼前利益。</p><p>团队中每个人的个人成长、工作经历、兴趣爱好都不同，看待问题的方式、自身的需求也会不一样，不能用同一套方法对待每个人。</p><p>胡萝卜加大棒可能是很多团队中的管理方法，就是通过  KPI  制定奖惩机制。但无论是奖励还是惩罚，最大的特点或者说是缺点，都是来自外部刺激。人对外部刺激的应对机制是增强免疫力，用多了就没效果了。</p><p>但即便是胡萝卜加大棒的模式下，也要讲究方式方法：</p><p>1、具体化：不管是奖励还是惩罚，需要具体，不要说表现不错、进步很大这种模糊的评价，只有具体化才能让每个人知道方向和目标；</p><p>2、公开化： 拿奖励来说，被奖励的人会受到更大的激励，同时也会让其他同学知道什么样的行为是正确的、被认可的；</p><p>3、及时性：发生事情后，需要立马作出奖励或惩罚的反馈，这样效果会更好，否则一段时间后，再拿出来说，都没啥感觉了。</p><p>上面的模式终究会失效，因为奖励会弱化一个人的内部动机嘛。所以更重要的是让每个员工有内驱力，我相信团队每个人都是想进步，想要去提升自己的能力。当然，也可能有那种混日子的，就不在讨论范围了。</p><p>那怎样能激发团队成员的积极性呢？</p><p>1、做感兴趣的事。最近制作产品宣传视频，这本来不属于产品经理的事情，但和我们团队的一位产品经理沟通后，表示愿意尝试，因为对产品理解比较深刻，也对视频制作有兴趣，周末还主动在家进行剪辑和调整。最后效果得到大家一致称赞，我想这就是兴趣导致的内驱力。</p><p>2、提升专精度。前些年有一次年终一对一沟通，有一位同学说，平时安排的工作过于简单，没有挑战，觉得很没意思。当团队成员的能力提升后，工作安排也需要与之匹配。而且还要根据每个人的兴趣进行培养，让每个人都能变得更专业，成为某个领域的专家，这样就会带来更大的满足感和更大的动力。</p><p>3、意义和使命。举个简单例子：安排给开发的任务不能只是这个做个列表，那里加个按钮，需要强调这些功能背后的逻辑、业务背景，以及能给客户带来什么样的利益，这样工作的意义和价值才能体现。 </p><p>4、放权。适当放权，让每个人有更多的自主权，而不是在被动的做事。参与感越强，做事的动力就越大。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在群里看到周筠老师征集小孩教育相关的问题，我第一个想到的问题就是：如何让孩子变得有内驱力？&lt;/p&gt;</summary>
    
    
    
    <category term="思考" scheme="http://fwhyy.com/categories/%E6%80%9D%E8%80%83/"/>
    
    
    <category term="成长" scheme="http://fwhyy.com/tags/%E6%88%90%E9%95%BF/"/>
    
    <category term="内驱力" scheme="http://fwhyy.com/tags/%E5%86%85%E9%A9%B1%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>银河麒麟系统安装中间件</title>
    <link href="http://fwhyy.com/2023/06/galaxy-kirin-system-installation-middleware/"/>
    <id>http://fwhyy.com/2023/06/galaxy-kirin-system-installation-middleware/</id>
    <published>2023-06-12T01:24:01.000Z</published>
    <updated>2023-06-19T22:36:33.862Z</updated>
    
    <content type="html"><![CDATA[<p>现在越来越多的企业级应用需要运行在国产化环境中，本文介绍下我们产品使用的中间件在国产操作系统银河麒麟的安装（不一定是最优方式，但能用）。</p><span id="more"></span><p>包含；Nginx、Redis、RabbitMQ、MongoDB、dotNETCore。</p><p>下图是银河麒麟服务器的信息：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202306191424224.webp"></p><p>想要顺利安装需要确保：</p><p>1、服务器能访问网络，完全离线的方式安装会更复杂，需要进一步研究；</p><p>2、修改  yum  源。</p><p>使用  <code>vi  /etc/yum.repos.d/kylin_aarch64.repo</code> 来设置  yum  源，文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##Kylin Linux Advanced Server 10 - os repo###</span></span></span><br><span class="line"></span><br><span class="line">[ks10-adv-os]</span><br><span class="line">name = Kylin Linux Advanced Server 10 - Os</span><br><span class="line">baseurl = https://update.cs2c.com.cn/NS/V10/V10SP3/os/adv/lic/base/$basearch/</span><br><span class="line">gpgcheck = 1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-kylin</span><br><span class="line">enabled = 1</span><br><span class="line"></span><br><span class="line">[ks10-adv-updates]</span><br><span class="line">name = Kylin Linux Advanced Server 10 - Updates</span><br><span class="line">baseurl = https://update.cs2c.com.cn/NS/V10/V10SP3/os/adv/lic/updates/$basearch/</span><br><span class="line">gpgcheck = 1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-kylin</span><br><span class="line">enabled = 1</span><br><span class="line"></span><br><span class="line">[ks10-adv-addons]</span><br><span class="line">name = Kylin Linux Advanced Server 10 - Addons</span><br><span class="line">baseurl = https://update.cs2c.com.cn/NS/V10/V10SP3/os/adv/lic/addons/$basearch/</span><br><span class="line">gpgcheck = 1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-kylin</span><br><span class="line">enabled = 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>先执行下面命令安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc gcc-c++ make unzip pcre pcre-devel zlib zlib-devel libxml2 libxml2-devel  readline readline-devel ncurses ncurses-devel perl-devel perl-ExtUtils-Embed openssl-devel -y</span><br></pre></td></tr></table></figure><p>下载源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -c http://nginx.org/download/nginx-1.20.1.tar.gz</span><br><span class="line">tar -zxvf  nginx-1.20.1.tar.gz -C /opt</span><br><span class="line">cd  /opt/nginx-1.20.1/</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-pcre</span><br></pre></td></tr></table></figure><p>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j2 &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>进入 /usr/local/nginx/sbin/ 目录，执行下面命令启动服务： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>执行<code>ps -ef | grep nginx</code> 查看 nginx 进程：</p><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202306191424692.webp"></p><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p>安装依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install cpp binutils glibc glibc-kernheaders glibc-common glibc-devel -y</span><br></pre></td></tr></table></figure><p>下载源码和：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget http://download.redis.io/releases/redis-6.0.2.tar.gz</span><br><span class="line">tar -zxvf redis-6.0.2.tar.gz -C /opt</span><br></pre></td></tr></table></figure><p>编译安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/redis-6.0.2</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir logs </span><br><span class="line">nohup /opt/redis-6.0.2/src/redis-server /opt/redis-6.0.2/redis.conf &gt;&gt; /opt/redis-6.0.2/logs/redis.log  2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>RabbitMQ  的安装比较简单，执行几个命令就行。</p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install socat logrotate -y</span><br><span class="line">yum -y install erlang -y</span><br><span class="line">yum -y install rabbitmq-server</span><br></pre></td></tr></table></figure><p>启动服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable rabbitmq-server</span><br><span class="line">systemctl start rabbitmq-server</span><br></pre></td></tr></table></figure><p>如果想要使用浏览器访问  RabbitMQ 的管理界面，需要启用插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>插件启用后，就可以在浏览器中输入：htp://ip:15672 进行访问了，15672  端口需要在防火墙进行开放。</p><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>因为上面的中间件已经安装了部分依赖，所以执行下面命令安装剩余依赖即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install libcurl-devel openssl libxml2-devel libxml2 glibc-static libstdc++-static libffi-devel</span><br></pre></td></tr></table></figure><h3 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装  Python"></a>安装  Python</h3><p>Python  安装的是  2.x  版本，因为这里  MongoDB  使用的是  3.6.19  版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget https://www.python.org/ftp/python/2.7.17/Python-2.7.17.tgz</span><br><span class="line">tar -zxvf Python-2.7.17.tgz</span><br><span class="line">cd Python-2.7.17</span><br><span class="line">./configure --prefix=/usr/local/python2</span><br><span class="line">make -j64</span><br><span class="line">make install</span><br><span class="line">ln -s /usr/local/python2/bin/python2.7 /usr/local/bin/python2.7</span><br></pre></td></tr></table></figure><h3 id="安装-setuptools-工具"><a href="#安装-setuptools-工具" class="headerlink" title="安装 setuptools 工具"></a>安装 setuptools 工具</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget https://github.com/pypa/setuptools/archive/v41.0.1.zip</span><br><span class="line">unzip setuptools-v41.0.1.zip</span><br><span class="line">cd setuptools-41.0.1</span><br><span class="line">/usr/local/bin/python2.7 bootstrap.py</span><br><span class="line">/usr/local/bin/python2.7 setup.py install</span><br></pre></td></tr></table></figure><h3 id="安装-pip-工具"><a href="#安装-pip-工具" class="headerlink" title="安装 pip  工具"></a>安装 pip  工具</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget https://github.com/pypa/pip/archive/19.2.2.tar.gz</span><br><span class="line">tar zxvf pip-19.2.2.tar.gz</span><br><span class="line">cd pip-19.2.2</span><br><span class="line">/usr/local/bin/python2.7 setup.py install</span><br></pre></td></tr></table></figure><h3 id="安装-mongo"><a href="#安装-mongo" class="headerlink" title="安装  mongo"></a>安装  mongo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget https://github.com/mongodb/mongo/archive/r3.6.19.tar.gz</span><br><span class="line">tar -zxvf mongo-r3.6.19.tar.gz</span><br><span class="line">cd mongo-r3.6.19</span><br><span class="line"><span class="meta">#</span><span class="bash">构建编译环境</span></span><br><span class="line">/usr/local/python2/bin/pip2 install -r buildscripts/requirements.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">创建数据目录</span></span><br><span class="line">mkdir -p /data/db</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">/usr/local/bin/python2.7 buildscripts/scons.py --prefix=/opt/mongo install MONGO_VERSION=3.6.19 CCFLAGS=&quot;-march=armv8-a+crc&quot; --disable-warnings-as-errors --variables-files=etc/scons/propagate_shell_environment.vars</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">创建软连接</span></span><br><span class="line">ln -s /opt/mongo/bin/mongo /usr/local/bin/mongo</span><br><span class="line">ln -s /opt/mongo/bin/mongod /usr/local/bin/mongod</span><br></pre></td></tr></table></figure><ul><li>–prefix=/opt/mongo 为安装目录</li></ul><p>执行上面命令如果没有出现任何错误，就安装成功了，执行下面命令进行服务端的后端启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup mongod &gt;&gt; /opt/mongo/logs/mongolog 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="dotNETCore-3-1"><a href="#dotNETCore-3-1" class="headerlink" title="dotNETCore 3.1"></a>dotNETCore 3.1</h2><p>安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gmp-devel mpfr-devel libmpc-devel -y</span><br></pre></td></tr></table></figure><p>执行下面命令安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.visualstudio.microsoft.com/download/pr/186257d9-bca2-4dda-be74-006205965ec9/b2b63d45482701473d9731abc41ecc2a/dotnet-sdk-3.1.426-linux-arm64.tar.gz</span><br><span class="line"></span><br><span class="line">mkdir -p /opt/dotnet</span><br><span class="line">tar -zxvf dotnet-sdk-3.1.426-linux-arm64.tar.gz -C /opt/dotnet</span><br><span class="line"></span><br><span class="line">ln -s /opt/dotnet/dotnet /usr/bin</span><br><span class="line">export DOTNET_ROOT=/opt/dotnet</span><br><span class="line">export PATH=$PATH:/opt/dotnet</span><br></pre></td></tr></table></figure><p> 执行命令  dotnet –info 进行验证，出现下面结果表示安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.NET Core SDK (reflecting any global.json):</span><br><span class="line"> Version:   3.1.426</span><br><span class="line"> Commit:    e81f6c8565</span><br><span class="line"></span><br><span class="line">Runtime Environment:</span><br><span class="line"> OS Name:     kylin</span><br><span class="line"> OS Version:  V10</span><br><span class="line"> OS Platform: Linux</span><br><span class="line"> RID:         linux-arm64</span><br><span class="line"> Base Path:   /opt/dotnet/sdk/3.1.426/</span><br><span class="line"></span><br><span class="line">Host (useful for support):</span><br><span class="line">  Version: 3.1.32</span><br><span class="line">  Commit:  f94bb2c3ff</span><br><span class="line"></span><br><span class="line">.NET Core SDKs installed:</span><br><span class="line">  3.1.426 [/opt/dotnet/sdk]</span><br><span class="line"></span><br><span class="line">.NET Core runtimes installed:</span><br><span class="line">  Microsoft.AspNetCore.App 3.1.32 [/opt/dotnet/shared/Microsoft.AspNetCore.App]</span><br><span class="line">  Microsoft.NETCore.App 3.1.32 [/opt/dotnet/shared/Microsoft.NETCore.App]</span><br><span class="line"></span><br><span class="line">To install additional .NET Core runtimes or SDKs:</span><br><span class="line">  https://aka.ms/dotnet-download</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;现在越来越多的企业级应用需要运行在国产化环境中，本文介绍下我们产品使用的中间件在国产操作系统银河麒麟的安装（不一定是最优方式，但能用）。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="http://fwhyy.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="中间件" scheme="http://fwhyy.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="国产化" scheme="http://fwhyy.com/tags/%E5%9B%BD%E4%BA%A7%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>五月读的四本书</title>
    <link href="http://fwhyy.com/2023/05/four-books-read-in-may/"/>
    <id>http://fwhyy.com/2023/05/four-books-read-in-may/</id>
    <published>2023-05-29T06:21:44.000Z</published>
    <updated>2023-06-19T08:57:28.041Z</updated>
    
    <content type="html"><![CDATA[<p>我读书很慢，读书慢不是因为读的很认真仔细，而是读书太少，也就是阅读量不够，量不够，质就难以发生变化，跑步如此，读书也是。</p><span id="more"></span><p>没有足够的阅读量，不光是读不快，有可能根本就读不进去，所以碰到一本书发现很难读，不是书不好，很可能是自己的积累不够，这时需要停下来，等有了足够积累再继续读。</p><p>所以现在看书方式有些调整：</p><ul><li>技术书籍看偏底层、经典的书籍，不用担心看的时间长，目的是理解、吃透。比如《凤凰架构》、《数据密集型应用系统设计》等。</li><li>技术书籍，主要看纸质书，如果是电子版，就会在电脑上看，方便记录笔记和查阅资料。</li><li>非技术书籍分为两类：办公室有一个书架，上面陈列着一些待读的纸质书，早、中、晚都可以看。</li><li>另一类就是微信读书和得到这类电子书了，利用碎片时间一两周也能看完一本。</li></ul><p>非技术书籍看什么？</p><p>自从在小宇宙上关注了《银杏树下》和《文化有限》后，就不愁不知道看什么书了，节目中讲的书在微信读书上有的就看电子版，没有的就在多抓鱼上淘。节目的推荐给了我一个范围，具体决定看那本还是要试看，看是否对我有吸引力，有吸引力的标准也很简单，当合上书时，是否有再次打开去阅读的欲望。</p><p>因为这种改变，读书的效率提升了不少，五月居然读完了四本，看到豆瓣的记录后，我也很惊讶。下面简单谈谈五月读的这几本书吧。</p><h2 id="你的懒惰让我愁肠百结"><a href="#你的懒惰让我愁肠百结" class="headerlink" title="你的懒惰让我愁肠百结"></a>你的懒惰让我愁肠百结</h2><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202306191422616.webp"></p><p>如果你不知道菲茨杰拉德，但一定听过他写的《了不起的盖茨比》。你的懒惰让我愁肠百结是作者在女儿的成长期写给女儿信的合集。</p><p>这本书看完最大的感受就是释然了，因为我也有一个  9  岁的女儿，在成长路上遇到了各种问题。谁曾想，这些问题在大作家的孩子身上也都存在。让我们看到了大作家的另一面，面对女儿的教育，也会苦口婆心、啰啰嗦嗦。</p><p>简单摘录几个片段：</p><p>女儿乱花钱的时候，会说：</p><blockquote><p>老这么管束你，我也非常厌烦，很多时候我甚至已经不在乎你会不会好好学习。我一边跟你争执，一边还得尽量令你生活舒适—— 这根本违反人性。我宁愿买辆新车。</p></blockquote><p>成绩也是关注的重点：</p><blockquote><p>你的自由完全取决于你的成绩</p></blockquote><p>为了培养女儿的良好习惯：</p><blockquote><p>如果你在一个礼拜里，每次用完一样东西，就立刻把它放回原位，而不是等用完三样东西再一起收拾，我想不出一个月，你就会养成习惯。</p></blockquote><p>树立正确的价值观：</p><blockquote><p>别为自己的小说不够拔尖而灰心丧气。同时，在这件事情上我也不打算鼓励你。毕竟，你若想跻身一流就得自己克服障碍，从实践中获取经验。没人能单凭发愿就能当上作家。</p></blockquote><h2 id="夜晚的潜水艇"><a href="#夜晚的潜水艇" class="headerlink" title="夜晚的潜水艇"></a>夜晚的潜水艇</h2><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202306191422075.webp"></p><p>90 后作家陈春成的首部短篇小说集，一共九篇。</p><p>还是见识太少，读第一篇《夜晚的潜水艇》的时候就被吸引了，结构精巧，想象力丰富。读完全书后，对作者更加佩服了。</p><p>每一篇都跟梦有关，梦和现实交织在一起，难以分清，有点庄周梦蝶的意思。</p><p>每一篇都在找东西，找硬币、找石碑、找湖、找佳酿、找名剑、找乐谱等。而且主人公都姓陈，这是作者对自己的影射。而我们每天面临着家庭琐事、小孩教育、繁忙的工作，还有要想去寻找的东西吗？</p><h2 id="局外人"><a href="#局外人" class="headerlink" title="局外人"></a>局外人</h2><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202306191422364.webp"></p><p>主人公莫尔索被认为是一个很冷漠的人，在母亲的葬礼上没有掉眼泪，甚至第二天还去看电影，以至于杀人后没有因为杀人本身，而是因为冷漠被定罪，荒诞而讽刺。</p><p>莫尔索看似冷漠，却是非常正常的一个人，很真实地做了自己，所以在社会这个大舞台中，就显得格格不入，最终得以悲惨的结局。</p><p>对书中的一个故事印象很深刻：</p><blockquote><p>有个人早年离开自己的村子，外出谋生。过了二十五年，他发了财，带着妻儿回家乡。他母亲与他妹妹在村里开了家旅店。为了要让她们得到意外的惊喜，他把自己的妻子和儿子留在另一个地方，自己则住进他母亲的旅馆。进去时，他母亲没有认出他。他想开个大玩笑，就特意租了一个房间，并亮出自己的钱财。夜里，他的母亲与妹妹为了谋财，用大锤砸死了他，把尸体扔进了河里。第二天早晨，他的妻子来了，懵然不知真情，通报了这位店客的姓名。母亲上吊自尽，妹妹投井而死。这则报道，我天天反复阅读，足足读了几千遍。一方面，这桩事不像是真的，另一方面，却又自然而然。不论怎样，我觉得这个店客有点咎由自取，人生在世，永远也不该演戏作假。</p></blockquote><p>是啊，「人生在世，永远也不该演戏作假。」，这或许是每个人内心都想做到的，但又有多少人是完全没有戴面具的在这个社会中游走呢？</p><h2 id="秋园"><a href="#秋园" class="headerlink" title="秋园"></a>秋园</h2><p><img src="https://cdn.jsdelivr.net/gh/oec2003/hblog-images/img/202306191422849.webp"></p><p>《秋园》是一本个人传记，作者杨本芬就是书中的人物之骅。秋园是之骅的妈妈，作者讲述了妈妈艰辛的一生，语言平实而生动。</p><p>秋园的一生经历了从洛阳到湖南、湖南到湖北、晚年又回湖南的颠沛流离；经历了少年丧父、中年丧夫、老年丧子的人生悲事；经历了两任丈夫，而且都走在了她的前面。</p><p>生活如此艰苦，秋园没有抱怨，而是积极地面对，坚韧的生活着。就像儿子子恒在她床底下发现两颗竹笋一样，生命力顽强，从山上地底下钻进房里，从来没有见过阳光，去那么努力的生长着。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我读书很慢，读书慢不是因为读的很认真仔细，而是读书太少，也就是阅读量不够，量不够，质就难以发生变化，跑步如此，读书也是。&lt;/p&gt;</summary>
    
    
    
    <category term="读书" scheme="http://fwhyy.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
    <category term="读书" scheme="http://fwhyy.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>做产品的思考</title>
    <link href="http://fwhyy.com/2023/05/tthinking-about-making-products/"/>
    <id>http://fwhyy.com/2023/05/tthinking-about-making-products/</id>
    <published>2023-05-22T01:19:28.000Z</published>
    <updated>2023-06-19T06:20:48.478Z</updated>
    
    <content type="html"><![CDATA[<p>在当今竞争激烈的市场中，如何打造出成功的产品是许多企业和团队关注的焦点。结合实际经验，我总结了一些值得关注的关于做产品思考的方面，希望能够为大家提供一些启示。</p><span id="more"></span><p>1、<strong>简单是一种能力。</strong>在设计产品时，保持简单性至关重要。简单并不意味着简陋，而是在功能和设计上追求高效、直观和易用。一种判断标准是用户不用看说明文档就能上手使用。微信发展到现在，功能很多，每次发版的更新说明都是：解决了一些已知问题，新增功能让用户自己慢慢去发现。作为国民 APP ，微信是简单的。</p><p>2、<strong>打好基础。</strong>在产品的主干功能还未成熟的情况下，匆忙添加其他能力会削弱用户对产品的信任。以低代码平台为例，如果核心功能表单、列表、流程都有问题，那么用户会选择其他更可靠的竞品。尼采说过：“人跟树是一样的，越是向往高处的阳光，它的根就越要伸向黑暗的地底。”做产品，一样的道理，打好基础很重要。</p><p>3、<strong>细节决定成败</strong>。很多时候，我们往往会更关注功能迭代、优先去满足业务。而对细节会忽略，甚至觉得不重要，但恰恰细节能体现出专业性。</p><p>比如：界面的风格是否统一、按钮位置是否一致、各类功能的小图标是否和功能相符等等。每一件小事都做好了，更容易让客户对产品、团队、公司产生信任。</p><p>好的产品在细节上下足功夫，使用户在使用过程中无法察觉，直到他们用了竞品后才能体会到差别。</p><p>4、<strong>事缓则圆</strong>。同一个客户的不同人员，或者不同的客户针对同一模块会提出各种需求，每个人说的好像都挺有道理。如果所有的要求都作为一个需求点添加到产品上，这样毫无节制的迭代产品功能，最终会做出一个庞大、复杂、易用性低但功能很全的产品。</p><p>这时可以冷静下来，综合考虑、多方调研，会发现，有的需求可能根本就不用做，有的多个需求可以使用另一个更好的方案就都解决了。</p><p>5、<strong>独特性。</strong>做任何产品，都会遇到很多竞品，怎么样能脱颖而出，具备市场竞争力，就需要建立产品的独特性。这样才能在激烈的竞争中找到生存的缝隙。</p><p>之前在油管上听少楠讲 flomo ，有很多功能不做，是因为要打造自己的产品独特性，如果做待办，就跟滴答成竞争对手了；做大纲笔记，就跟幕布成竞争对手了；做内容收藏，就跟 Pocket 成竞争对手了。</p><p>现在市场上低代码产品很多，大多数都是提供 SaaS 服务，而我们服务于大型头部客户，能满足复杂业务、将十几年的大型客户项目实施经验注入其中，这是我们的优势。</p><p>6、<strong>切换视角。</strong>一个产品一起讨论出来的酷炫的功能，一旦切换了用户视角去思考，会发现可能完全颠覆。</p><p>这种问题很常见，经常测试在功能层面验证没有问题的新特性发布后，使用者会发现有些场景不支持，因为开发者和使用者考虑问题的方式和角度是不一样的，所以我一直在团队强调无论是产品经理还是开发同学，一定要能以用户的思维去设计和使用产品功能，才能发现更多细节问题。</p><p>7、<strong>成为重度使用者</strong>。要做好一个产品，我们需要深入了解其功能和使用场景，首先我们自己需要成为产品的重度使用者，如果自己都不愿意使用，怎么能去说服客户使用呢？</p><p>重度使用自己的产品，才能深刻理解客户的诉求，才能站在客户的角度去思考和解决问题，最终的迭代和交付才是有价值的。</p><p>8、<strong>降低边际成本。</strong>低代码作为一个平台级工具，属于平台级产品。基于低代码产品构建出来的业务系统，例如：CRM、MES 等同样也是产品。</p><p>不同行业对这些业务系统的要求是有差异的，那么在设计这些业务产品时，提高复用性、做到方便迁移和后期运维，就是需要重点考虑的事情了。</p><p>9、<strong>耐心。</strong>做产品需要长期有耐心，持续改进和迭代，永远没有最好，但至少有那么一刻，你很愿意，并且很自己地将自己做的产品推荐给身边的朋友。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在当今竞争激烈的市场中，如何打造出成功的产品是许多企业和团队关注的焦点。结合实际经验，我总结了一些值得关注的关于做产品思考的方面，希望能够为大家提供一些启示。&lt;/p&gt;</summary>
    
    
    
    <category term="思考" scheme="http://fwhyy.com/categories/%E6%80%9D%E8%80%83/"/>
    
    
    <category term="产品" scheme="http://fwhyy.com/tags/%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
</feed>
